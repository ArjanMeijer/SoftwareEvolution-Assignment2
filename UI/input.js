var RascalResult = [{"occurences": [[422, 11, "/src/smallsql/junit/BenchTest.java"], [530, 11, "/src/smallsql/junit/BenchTest.java"], ], "code":  ["","pr.setDouble(  9 , 567.45 );","pr.setFloat (  10 , (float)78.89 );","pr.setTime  (  11, new Time( System.currentTimeMillis() ) );","pr.setShort (  12, (short)23456 );","pr.setFloat (  13, (float)34.56 );","pr.setString(  14, \"sysname (30) NULL\" );","pr.setString(  15 , \"text NULL\" );","pr.setByte  (  16, (byte)28 );","pr.setBytes (  17, byteArray );","pr.setString(  18, \"varchar (255) NULL\" );","pr.setInt   (  19 , i );"],} ,{"occurences": [[-8, 11, "/src/smallsql/junit/TestThreads.java"], [-5, 11, "/src/smallsql/database/IndexNode.java"], ], "code":  ["","value.dataType  = dataType;","value.small     = small;","value.large     = large;","return value;","}","private static class TestValue{","String dataType;","Object small;","Object large;","}","}"],} ,{"occurences": [[474, 32, "/src/smallsql/database/ExpressionArithmetic.java"], [48, 32, "/src/smallsql/database/ExpressionFunctionReturnP1.java"], ], "code":  ["","if(isNull()) return null;","int dataType = getDataType();","switch(dataType){","case SQLTokenizer.BIT:","case SQLTokenizer.BOOLEAN:","return getBoolean() ? Boolean.TRUE : Boolean.FALSE;","case SQLTokenizer.BINARY:","case SQLTokenizer.VARBINARY:","return getBytes();","case SQLTokenizer.TINYINT:","case SQLTokenizer.SMALLINT:","case SQLTokenizer.INT:","return new Integer( getInt() );","case SQLTokenizer.BIGINT:","return new Long( getLong() );","case SQLTokenizer.REAL:","return new Float( getFloat() );","case SQLTokenizer.FLOAT:","case SQLTokenizer.DOUBLE:","return new Double( getDouble() );","case SQLTokenizer.MONEY:","case SQLTokenizer.SMALLMONEY:","return Money.createFromUnscaledValue( getMoney() );","case SQLTokenizer.NUMERIC:","case SQLTokenizer.DECIMAL:","return getNumeric();","case SQLTokenizer.CHAR:","case SQLTokenizer.NCHAR:","case SQLTokenizer.VARCHAR:","case SQLTokenizer.NVARCHAR:","case SQLTokenizer.LONGNVARCHAR:","case SQLTokenizer.LONGVARCHAR:"],} ,{"occurences": [[489, 17, "/src/smallsql/database/ExpressionArithmetic.java"], [63, 17, "/src/smallsql/database/ExpressionFunctionReturnP1.java"], [686, 21, "/src/smallsql/database/StoreImpl.java"], [1481, 21, "/src/smallsql/database/StoreImpl.java"], ], "code":  ["","case SQLTokenizer.REAL:","return new Float( getFloat() );","case SQLTokenizer.FLOAT:","case SQLTokenizer.DOUBLE:","return new Double( getDouble() );","case SQLTokenizer.MONEY:","case SQLTokenizer.SMALLMONEY:","return Money.createFromUnscaledValue( getMoney() );","case SQLTokenizer.NUMERIC:","case SQLTokenizer.DECIMAL:","return getNumeric();","case SQLTokenizer.CHAR:","case SQLTokenizer.NCHAR:","case SQLTokenizer.VARCHAR:","case SQLTokenizer.NVARCHAR:","case SQLTokenizer.LONGNVARCHAR:","case SQLTokenizer.LONGVARCHAR:"],} ,{"occurences": [[141, 12, "/src/smallsql/junit/TestResultSet.java"], [98, 12, "/src/smallsql/junit/TestResultSet.java"], ], "code":  ["","assertFalse(\"isAfterLast\", rs.isAfterLast() );","","assertTrue(\"last\", rs.last() );","assertEquals(\"getRow\", 1, rs.getRow() );","assertTrue(\"isLast\", rs.isLast() );","","rs.afterLast();","assertFalse(\"isBeforeFirst\", rs.isBeforeFirst() );","assertTrue(\"isAfterLast\", rs.isAfterLast() );","assertEquals(\"getRow\", 0, rs.getRow() );","}",""],} ,{"occurences": [[237, 13, "/src/smallsql/junit/BenchTest.java"], [125, 13, "/src/smallsql/junit/BenchTest.java"], [184, 13, "/src/smallsql/junit/BenchTest.java"], ], "code":  ["","else System.out.println( \"  Test time: \" + time + \" ms\");","st.close();","}catch(Exception e){","System.out.println(\"  Failed:\"+e);","}finally{","System.out.println();","System.out.println(\"===================================================================\");","}","}","","","",""],} ,{"occurences": [[311, 17, "/src/smallsql/database/ExpressionArithmetic.java"], [264, 17, "/src/smallsql/database/ExpressionArithmetic.java"], [477, 29, "/src/smallsql/database/ExpressionArithmetic.java"], [51, 29, "/src/smallsql/database/ExpressionFunctionReturnP1.java"], ], "code":  ["","case SQLTokenizer.BIT:","case SQLTokenizer.BOOLEAN:","return getBoolean() ? 1 : 0;","case SQLTokenizer.TINYINT:","case SQLTokenizer.SMALLINT:","case SQLTokenizer.INT:","return getIntImpl();","case SQLTokenizer.BIGINT:","return getLongImpl();","case SQLTokenizer.REAL:","return getFloatImpl();","case SQLTokenizer.FLOAT:","case SQLTokenizer.DOUBLE:","case SQLTokenizer.MONEY:","case SQLTokenizer.SMALLMONEY:","case SQLTokenizer.NUMERIC:","case SQLTokenizer.DECIMAL:"],} ,{"occurences": [[44, 14, "/src/smallsql/junit/TestOperatoren.java"], [47, 14, "/src/smallsql/junit/TestJoins.java"], ], "code":  ["","private static final TestValue[] TESTS = new TestValue[]{","a(\"tinyint\"           , new Byte( (byte)3),     new Byte( (byte)4)),","a(\"byte\"              , new Byte( (byte)3),     new Byte( (byte)4)),","a(\"smallint\"          , new Short( (short)3),   new Short( (short)4)),","a(\"int\"               , new Integer(3),         new Integer(4)),","a(\"bigint\"            , new Long(3),            new Long(4)),","a(\"real\"              , new Float(3.45),        new Float(4.56)),","a(\"float\"             , new Float(3.45),        new Float(4.56)),","a(\"double\"            , new Double(3.45),       new Double(4.56)),","a(\"smallmoney\"        , new Float(3.45),        new Float(4.56)),","a(\"money\"             , new Float(3.45),        new Float(4.56)),","a(\"money\"             , new Double(3.45),       new Double(4.56)),","a(\"numeric(19,2)\"     , new BigDecimal(\"3.45\"), new BigDecimal(\"4.56\")),","a(\"decimal(19,2)\"     , new BigDecimal(\"3.45\"), new BigDecimal(\"4.56\")),"],} ,{"occurences": [[747, 12, "/src/smallsql/junit/TestOrderBy.java"], [716, 12, "/src/smallsql/junit/TestOrderBy.java"], ], "code":  ["","count = 0;","while(rs.previous()) count++;","assertEquals( valueCount, count );","rs.beforeFirst();","count = -1;","while(rs.next()) count++;","assertEquals( valueCount, count );","rs.beforeFirst();","count = -1;","while(rs.next()) count++;","assertEquals( valueCount, count );","}"],} ,{"occurences": [[141, 14, "/src/smallsql/junit/TestJoins.java"], [127, 14, "/src/smallsql/junit/TestOperatoren.java"], [135, 20, "/src/smallsql/junit/TestJoins.java"], [121, 20, "/src/smallsql/junit/TestOperatoren.java"], ], "code":  ["","pr.setObject( 2, testValue.large);","pr.execute();","pr.setObject( 1, testValue.large);","pr.setObject( 2, testValue.small);","pr.execute();","pr.setObject( 1, null);","pr.setObject( 2, testValue.small);","pr.execute();","pr.setObject( 1, testValue.small);","pr.setObject( 2, null);","pr.execute();","pr.setObject( 1, null);","pr.setObject( 2, null);","pr.execute();"],} ,{"occurences": [[377, 12, "/src/smallsql/junit/TestFunctions.java"], [98, 12, "/src/smallsql/junit/TestOperatoren.java"], ], "code":  ["","Statement st = con.createStatement();","st.execute(\"drop table \" + table);","st.close();","}catch(Throwable e){","","}","}","public void setUp(){","tearDown();","try{","Connection con = AllTests.getConnection();","Statement st = con.createStatement();"],} ,{"occurences": [[119, 12, "/src/smallsql/database/IndexScrollStatus.java"], [88, 12, "/src/smallsql/database/IndexScrollStatus.java"], ], "code":  ["","if(status.nodeValue != null){","if(status.nodeValue instanceof IndexNode){","level++;","nodeStack.push(","new IndexNodeScrollStatus( (IndexNode)status.nodeValue,","(expressions.get(level).getAlias() != SQLTokenizer.DESC_STR),","scroll, level));","continue;","}else","return getReturnValue(status.nodeValue);","}",""],} ,{"occurences": [[46, 12, "/src/smallsql/junit/TestOperatoren.java"], [49, 12, "/src/smallsql/junit/TestJoins.java"], ], "code":  ["","a(\"byte\"              , new Byte( (byte)3),     new Byte( (byte)4)),","a(\"smallint\"          , new Short( (short)3),   new Short( (short)4)),","a(\"int\"               , new Integer(3),         new Integer(4)),","a(\"bigint\"            , new Long(3),            new Long(4)),","a(\"real\"              , new Float(3.45),        new Float(4.56)),","a(\"float\"             , new Float(3.45),        new Float(4.56)),","a(\"double\"            , new Double(3.45),       new Double(4.56)),","a(\"smallmoney\"        , new Float(3.45),        new Float(4.56)),","a(\"money\"             , new Float(3.45),        new Float(4.56)),","a(\"money\"             , new Double(3.45),       new Double(4.56)),","a(\"numeric(19,2)\"     , new BigDecimal(\"3.45\"), new BigDecimal(\"4.56\")),","a(\"decimal(19,2)\"     , new BigDecimal(\"3.45\"), new BigDecimal(\"4.56\")),"],} ,{"occurences": [[211, 14, "/src/smallsql/junit/TestOrderBy.java"], [239, 14, "/src/smallsql/junit/TestOrderBy.java"], ], "code":  ["","oldValue = rs.getString(\"v\");","int count = 1;","while(oldValue != null && rs.next()){","String newValue = rs.getString(\"v\");","if(newValue != null){","assertTrue( oldValue.compareTo( newValue ) \> 0 );","count++;","}","oldValue = newValue;","}","assertNull(oldValue);","assertFalse( rs.next() );","assertEquals( valueCount, count );","}"],} ,{"occurences": [[376, 13, "/src/smallsql/junit/TestFunctions.java"], [97, 13, "/src/smallsql/junit/TestOperatoren.java"], ], "code":  ["","Connection con = AllTests.getConnection();","Statement st = con.createStatement();","st.execute(\"drop table \" + table);","st.close();","}catch(Throwable e){","","}","}","public void setUp(){","tearDown();","try{","Connection con = AllTests.getConnection();","Statement st = con.createStatement();"],} ,{"occurences": [[140, 15, "/src/smallsql/junit/TestJoins.java"], [126, 15, "/src/smallsql/junit/TestOperatoren.java"], [143, 12, "/src/smallsql/junit/TestJoins.java"], [129, 12, "/src/smallsql/junit/TestOperatoren.java"], ], "code":  ["","pr.setObject( 1, testValue.large);","pr.setObject( 2, testValue.small);","pr.execute();","pr.setObject( 1, null);","pr.setObject( 2, testValue.small);","pr.execute();","pr.setObject( 1, testValue.small);","pr.setObject( 2, null);","pr.execute();","pr.setObject( 1, null);","pr.setObject( 2, null);","pr.execute();"],} ,{"occurences": [[494, 12, "/src/smallsql/database/ExpressionArithmetic.java"], [68, 12, "/src/smallsql/database/ExpressionFunctionReturnP1.java"], [696, 11, "/src/smallsql/database/StoreImpl.java"], [1491, 11, "/src/smallsql/database/StoreImpl.java"], ], "code":  ["","case SQLTokenizer.MONEY:","case SQLTokenizer.JAVA_OBJECT:","case SQLTokenizer.LONGVARBINARY:","case SQLTokenizer.BLOB:","case SQLTokenizer.CLOB:","case SQLTokenizer.NCLOB:","case SQLTokenizer.LONGNVARCHAR:","case SQLTokenizer.LONGVARCHAR:","case SQLTokenizer.TIMESTAMP:","offset += 8;","break;"],} ,{"occurences": [[312, 16, "/src/smallsql/database/ExpressionArithmetic.java"], [265, 16, "/src/smallsql/database/ExpressionArithmetic.java"], [478, 28, "/src/smallsql/database/ExpressionArithmetic.java"], [52, 28, "/src/smallsql/database/ExpressionFunctionReturnP1.java"], ], "code":  ["","case SQLTokenizer.BOOLEAN:","return getBoolean() ? 1 : 0;","case SQLTokenizer.TINYINT:","case SQLTokenizer.SMALLINT:","case SQLTokenizer.INT:","return getIntImpl();","case SQLTokenizer.BIGINT:","return getLongImpl();","case SQLTokenizer.REAL:","return getFloatImpl();","case SQLTokenizer.FLOAT:","case SQLTokenizer.DOUBLE:","case SQLTokenizer.MONEY:","case SQLTokenizer.SMALLMONEY:","case SQLTokenizer.NUMERIC:","case SQLTokenizer.DECIMAL:"],} ,{"occurences": [[214, 11, "/src/smallsql/junit/TestOrderBy.java"], [242, 11, "/src/smallsql/junit/TestOrderBy.java"], ], "code":  ["","String newValue = rs.getString(\"v\");","if(newValue != null){","assertTrue( oldValue.compareTo( newValue ) \> 0 );","count++;","}","oldValue = newValue;","}","assertNull(oldValue);","assertFalse( rs.next() );","assertEquals( valueCount, count );","}"],} ,{"occurences": [[414, 18, "/src/smallsql/junit/BenchTest.java"], [468, 18, "/src/smallsql/junit/BenchTest.java"], ], "code":  ["","pr.setBytes (  1, byteArray );","pr.setString(  2 , \"Test\" );","pr.setDate  (  3 , new Date( System.currentTimeMillis() ) );","pr.setFloat (  4, (float)1234.56789 );","pr.setFloat (  5 , (float)9876.54321 );","pr.setBytes (  6, largeByteArray );","pr.setInt   (  7 , i );","pr.setDouble(  8 , 23.45 );","pr.setDouble(  9 , 567.45 );","pr.setFloat (  10 , (float)78.89 );","pr.setTime  (  11, new Time( System.currentTimeMillis() ) );","pr.setShort (  12, (short)23456 );","pr.setFloat (  13, (float)34.56 );","pr.setString(  14, \"sysname (30) NULL\" );","pr.setString(  15 , \"text NULL\" );","pr.setByte  (  16, (byte)28 );","pr.setBytes (  17, byteArray );","pr.setString(  18, \"varchar (255) NULL\" );"],} ,{"occurences": [[135, 18, "/src/smallsql/junit/TestResultSet.java"], [92, 18, "/src/smallsql/junit/TestResultSet.java"], ], "code":  ["","assertTrue(\"first\", rs.first() );","assertEquals(\"getRow\", 1, rs.getRow() );","","assertFalse(\"previous\", rs.previous() );","assertEquals(\"getRow\", 0, rs.getRow() );","assertTrue(\"isBeforeFirst\", rs.isBeforeFirst() );","assertFalse(\"isAfterLast\", rs.isAfterLast() );","","assertTrue(\"last\", rs.last() );","assertEquals(\"getRow\", 1, rs.getRow() );","assertTrue(\"isLast\", rs.isLast() );","","rs.afterLast();","assertFalse(\"isBeforeFirst\", rs.isBeforeFirst() );","assertTrue(\"isAfterLast\", rs.isAfterLast() );","assertEquals(\"getRow\", 0, rs.getRow() );","}",""],} ,{"occurences": [[155, 21, "/src/smallsql/junit/TestThreads.java"], [107, 21, "/src/smallsql/junit/TestThreads.java"], [52, 16, "/src/smallsql/junit/TestThreads.java"], ], "code":  ["","throwable = ex;","}","}","});","threadList.add(thread);","thread.start();","}","","for(int i = 0; i \< threadList.size(); i++){","Thread thread = (Thread)threadList.get(i);","thread.join(5000);","}","","if(throwable != null){","throw throwable;","}"],} ,{"occurences": [[123, 15, "/src/smallsql/junit/BenchTest.java"], [182, 15, "/src/smallsql/junit/BenchTest.java"], ], "code":  ["","if (count != rowCount)","System.out.println( \"  Failed: Only \" + count + \" rows were inserted.\");","else System.out.println( \"  Test time: \" + time + \" ms\");","st.close();","}catch(Exception e){","System.out.println(\"  Failed:\"+e);","}finally{","System.out.println();","System.out.println(\"===================================================================\");","}","}","","","",""],} ,{"occurences": [[49, 11, "/src/smallsql/database/ExpressionFunctionRound.java"], [49, 11, "/src/smallsql/database/ExpressionFunctionTruncate.java"], ], "code":  ["","if(places \> 0){","for(int i=0; i\<places; i++){","factor *= 10;","}","value *= factor;","}else{","for(int i=0; i\>places; i--){","factor *= 10;","}","value /= factor;","}"],} ,{"occurences": [[636, 13, "/src/smallsql/junit/BenchTest.java"], [676, 13, "/src/smallsql/junit/BenchTest.java"], ], "code":  ["","java.io.File file = new java.io.File(tableName+\".bin\");","file.delete();","}catch(Exception e){","System.out.println(\"  Failed:\"+e);","}finally{","System.out.println();","System.out.println(\"===================================================================\");","}","}","","","",""],} ,{"occurences": [[75, 15, "/src/smallsql/database/ExpressionFunctionReturnString.java"], [71, 15, "/src/smallsql/database/ExpressionFunctionReturnP1StringAndBinary.java"], ], "code":  ["","return Float.parseFloat(getString().trim());","}","final double getDouble() throws Exception {","if(isNull()) return 0;","return Double.parseDouble(getString().trim());","}","final long getMoney() throws Exception {","if(isNull()) return 0;","return Money.parseMoney(getString().trim());","}","final MutableNumeric getNumeric() throws Exception {","if(isNull()) return null;","return new MutableNumeric(getString().trim());","}","final Object getObject() throws Exception {"],} ,{"occurences": [[314, 14, "/src/smallsql/database/ExpressionArithmetic.java"], [267, 14, "/src/smallsql/database/ExpressionArithmetic.java"], [483, 23, "/src/smallsql/database/ExpressionArithmetic.java"], [57, 23, "/src/smallsql/database/ExpressionFunctionReturnP1.java"], [1098, 12, "/src/smallsql/database/StoreImpl.java"], [1033, 12, "/src/smallsql/database/StoreImpl.java"], ], "code":  ["","case SQLTokenizer.TINYINT:","return readUnsignedByte();","case SQLTokenizer.SMALLINT:","return readShort();","case SQLTokenizer.INT:","return readInt();","case SQLTokenizer.BIGINT:","return readLong();","case SQLTokenizer.REAL:","return readFloat();","case SQLTokenizer.FLOAT:","case SQLTokenizer.DOUBLE:"],} ,{"occurences": [[1099, 11, "/src/smallsql/database/StoreImpl.java"], [1034, 11, "/src/smallsql/database/StoreImpl.java"], ], "code":  ["","return readUnsignedByte();","case SQLTokenizer.SMALLINT:","return readShort();","case SQLTokenizer.INT:","return readInt();","case SQLTokenizer.BIGINT:","return readLong();","case SQLTokenizer.REAL:","return readFloat();","case SQLTokenizer.FLOAT:","case SQLTokenizer.DOUBLE:"],} ,{"occurences": [[1371, 12, "/src/smallsql/database/StoreImpl.java"], [1304, 12, "/src/smallsql/database/StoreImpl.java"], ], "code":  ["","case SQLTokenizer.NCHAR:","case SQLTokenizer.VARCHAR:","case SQLTokenizer.NVARCHAR:","return readString();","case SQLTokenizer.CLOB:","case SQLTokenizer.NCLOB:","case SQLTokenizer.LONGNVARCHAR:","case SQLTokenizer.LONGVARCHAR:","return readLongString();","case SQLTokenizer.JAVA_OBJECT:","ByteArrayInputStream bais = new ByteArrayInputStream(readLongBinary());","ObjectInputStream ois = new ObjectInputStream(bais);"],} ,{"occurences": [[416, 16, "/src/smallsql/junit/BenchTest.java"], [470, 16, "/src/smallsql/junit/BenchTest.java"], ], "code":  ["","pr.setDate  (  3 , new Date( System.currentTimeMillis() ) );","pr.setFloat (  4, (float)1234.56789 );","pr.setFloat (  5 , (float)9876.54321 );","pr.setBytes (  6, largeByteArray );","pr.setInt   (  7 , i );","pr.setDouble(  8 , 23.45 );","pr.setDouble(  9 , 567.45 );","pr.setFloat (  10 , (float)78.89 );","pr.setTime  (  11, new Time( System.currentTimeMillis() ) );","pr.setShort (  12, (short)23456 );","pr.setFloat (  13, (float)34.56 );","pr.setString(  14, \"sysname (30) NULL\" );","pr.setString(  15 , \"text NULL\" );","pr.setByte  (  16, (byte)28 );","pr.setBytes (  17, byteArray );","pr.setString(  18, \"varchar (255) NULL\" );"],} ,{"occurences": [[67, 23, "/src/smallsql/database/ExpressionFunctionReturnString.java"], [63, 23, "/src/smallsql/database/ExpressionFunctionReturnP1StringAndBinary.java"], ], "code":  ["","return Integer.parseInt(getString().trim());","}","final long getLong() throws Exception {","if(isNull()) return 0;","return Long.parseLong(getString().trim());","}","final float getFloat() throws Exception {","if(isNull()) return 0;","return Float.parseFloat(getString().trim());","}","final double getDouble() throws Exception {","if(isNull()) return 0;","return Double.parseDouble(getString().trim());","}","final long getMoney() throws Exception {","if(isNull()) return 0;","return Money.parseMoney(getString().trim());","}","final MutableNumeric getNumeric() throws Exception {","if(isNull()) return null;","return new MutableNumeric(getString().trim());","}","final Object getObject() throws Exception {"],} ,{"occurences": [[439, 17, "/src/smallsql/junit/BenchTest.java"], [549, 17, "/src/smallsql/junit/BenchTest.java"], ], "code":  ["","return;","}","}","time += System.currentTimeMillis();","System.out.println( \"  Test time: \" + time + \" ms\");","pr.close();","}catch(Exception e){","System.out.println(\"  Failed:\"+e);","}finally{","System.out.println();","System.out.println(\"===================================================================\");","}","}","","","",""],} ,{"occurences": [[132, 21, "/src/smallsql/junit/TestResultSet.java"], [89, 21, "/src/smallsql/junit/TestResultSet.java"], ], "code":  ["","assertTrue(\"isAfterLast\", rs.isAfterLast() );","assertEquals(\"getRow\", 0, rs.getRow() );","","assertTrue(\"first\", rs.first() );","assertEquals(\"getRow\", 1, rs.getRow() );","","assertFalse(\"previous\", rs.previous() );","assertEquals(\"getRow\", 0, rs.getRow() );","assertTrue(\"isBeforeFirst\", rs.isBeforeFirst() );","assertFalse(\"isAfterLast\", rs.isAfterLast() );","","assertTrue(\"last\", rs.last() );","assertEquals(\"getRow\", 1, rs.getRow() );","assertTrue(\"isLast\", rs.isLast() );","","rs.afterLast();","assertFalse(\"isBeforeFirst\", rs.isBeforeFirst() );","assertTrue(\"isAfterLast\", rs.isAfterLast() );","assertEquals(\"getRow\", 0, rs.getRow() );","}",""],} ,{"occurences": [[163, 13, "/src/smallsql/junit/TestThreads.java"], [115, 13, "/src/smallsql/junit/TestThreads.java"], ], "code":  ["","for(int i = 0; i \< threadList.size(); i++){","Thread thread = (Thread)threadList.get(i);","thread.join(5000);","}","","if(throwable != null){","throw throwable;","}","assertEqualsRsValue(new Integer(200), \"SELECT value FROM ConcurrentWrite\");","}finally{","dropTable(con, \"ConcurrentWrite\");","}","}"],} ,{"occurences": [[129, 24, "/src/smallsql/junit/TestResultSet.java"], [86, 24, "/src/smallsql/junit/TestResultSet.java"], ], "code":  ["","assertTrue(\"isLast\", rs.isLast() );","assertFalse(\"next\", rs.next() );","assertFalse(\"isBeforeFirst\", rs.isBeforeFirst() );","assertTrue(\"isAfterLast\", rs.isAfterLast() );","assertEquals(\"getRow\", 0, rs.getRow() );","","assertTrue(\"first\", rs.first() );","assertEquals(\"getRow\", 1, rs.getRow() );","","assertFalse(\"previous\", rs.previous() );","assertEquals(\"getRow\", 0, rs.getRow() );","assertTrue(\"isBeforeFirst\", rs.isBeforeFirst() );","assertFalse(\"isAfterLast\", rs.isAfterLast() );","","assertTrue(\"last\", rs.last() );","assertEquals(\"getRow\", 1, rs.getRow() );","assertTrue(\"isLast\", rs.isLast() );","","rs.afterLast();","assertFalse(\"isBeforeFirst\", rs.isBeforeFirst() );","assertTrue(\"isAfterLast\", rs.isAfterLast() );","assertEquals(\"getRow\", 0, rs.getRow() );","}",""],} ,{"occurences": [[1370, 13, "/src/smallsql/database/StoreImpl.java"], [1303, 13, "/src/smallsql/database/StoreImpl.java"], ], "code":  ["","case SQLTokenizer.CHAR:","case SQLTokenizer.NCHAR:","case SQLTokenizer.VARCHAR:","case SQLTokenizer.NVARCHAR:","return readString();","case SQLTokenizer.CLOB:","case SQLTokenizer.NCLOB:","case SQLTokenizer.LONGNVARCHAR:","case SQLTokenizer.LONGVARCHAR:","return readLongString();","case SQLTokenizer.JAVA_OBJECT:","ByteArrayInputStream bais = new ByteArrayInputStream(readLongBinary());","ObjectInputStream ois = new ObjectInputStream(bais);"],} ,{"occurences": [[273, 11, "/src/smallsql/database/SSStatement.java"], [251, 11, "/src/smallsql/database/SSPreparedStatement.java"], ], "code":  ["","failed = new BatchUpdateException(ex.getMessage(), ex.getSQLState(), ex.getErrorCode(), result);","failed.initCause(ex);","}","failed.setNextException(ex);","}","}","batches.clear();","if(failed != null)","throw failed;","return result;","}"],} ,{"occurences": [[165, 11, "/src/smallsql/junit/TestThreads.java"], [117, 11, "/src/smallsql/junit/TestThreads.java"], ], "code":  ["","thread.join(5000);","}","","if(throwable != null){","throw throwable;","}","assertEqualsRsValue(new Integer(200), \"SELECT value FROM ConcurrentWrite\");","}finally{","dropTable(con, \"ConcurrentWrite\");","}","}"],} ,{"occurences": [[313, 15, "/src/smallsql/database/ExpressionArithmetic.java"], [266, 15, "/src/smallsql/database/ExpressionArithmetic.java"], ], "code":  ["","return getBoolean() ? 1 : 0;","case SQLTokenizer.TINYINT:","case SQLTokenizer.SMALLINT:","case SQLTokenizer.INT:","return getIntImpl();","case SQLTokenizer.BIGINT:","return getLongImpl();","case SQLTokenizer.REAL:","return getFloatImpl();","case SQLTokenizer.FLOAT:","case SQLTokenizer.DOUBLE:","case SQLTokenizer.MONEY:","case SQLTokenizer.SMALLMONEY:","case SQLTokenizer.NUMERIC:","case SQLTokenizer.DECIMAL:"],} ,{"occurences": [[413, 19, "/src/smallsql/junit/BenchTest.java"], [467, 19, "/src/smallsql/junit/BenchTest.java"], ], "code":  ["","for (int i=0; i\<rowCount; i++){","pr.setBytes (  1, byteArray );","pr.setString(  2 , \"Test\" );","pr.setDate  (  3 , new Date( System.currentTimeMillis() ) );","pr.setFloat (  4, (float)1234.56789 );","pr.setFloat (  5 , (float)9876.54321 );","pr.setBytes (  6, largeByteArray );","pr.setInt   (  7 , i );","pr.setDouble(  8 , 23.45 );","pr.setDouble(  9 , 567.45 );","pr.setFloat (  10 , (float)78.89 );","pr.setTime  (  11, new Time( System.currentTimeMillis() ) );","pr.setShort (  12, (short)23456 );","pr.setFloat (  13, (float)34.56 );","pr.setString(  14, \"sysname (30) NULL\" );","pr.setString(  15 , \"text NULL\" );","pr.setByte  (  16, (byte)28 );","pr.setBytes (  17, byteArray );","pr.setString(  18, \"varchar (255) NULL\" );"],} ,{"occurences": [[480, 26, "/src/smallsql/database/ExpressionArithmetic.java"], [54, 26, "/src/smallsql/database/ExpressionFunctionReturnP1.java"], ], "code":  ["","case SQLTokenizer.BINARY:","case SQLTokenizer.VARBINARY:","return getBytes();","case SQLTokenizer.TINYINT:","case SQLTokenizer.SMALLINT:","case SQLTokenizer.INT:","return new Integer( getInt() );","case SQLTokenizer.BIGINT:","return new Long( getLong() );","case SQLTokenizer.REAL:","return new Float( getFloat() );","case SQLTokenizer.FLOAT:","case SQLTokenizer.DOUBLE:","return new Double( getDouble() );","case SQLTokenizer.MONEY:","case SQLTokenizer.SMALLMONEY:","return Money.createFromUnscaledValue( getMoney() );","case SQLTokenizer.NUMERIC:","case SQLTokenizer.DECIMAL:","return getNumeric();","case SQLTokenizer.CHAR:","case SQLTokenizer.NCHAR:","case SQLTokenizer.VARCHAR:","case SQLTokenizer.NVARCHAR:","case SQLTokenizer.LONGNVARCHAR:","case SQLTokenizer.LONGVARCHAR:"],} ,{"occurences": [[479, 27, "/src/smallsql/database/ExpressionArithmetic.java"], [53, 27, "/src/smallsql/database/ExpressionFunctionReturnP1.java"], ], "code":  ["","return getBoolean() ? Boolean.TRUE : Boolean.FALSE;","case SQLTokenizer.BINARY:","case SQLTokenizer.VARBINARY:","return getBytes();","case SQLTokenizer.TINYINT:","case SQLTokenizer.SMALLINT:","case SQLTokenizer.INT:","return new Integer( getInt() );","case SQLTokenizer.BIGINT:","return new Long( getLong() );","case SQLTokenizer.REAL:","return new Float( getFloat() );","case SQLTokenizer.FLOAT:","case SQLTokenizer.DOUBLE:","return new Double( getDouble() );","case SQLTokenizer.MONEY:","case SQLTokenizer.SMALLMONEY:","return Money.createFromUnscaledValue( getMoney() );","case SQLTokenizer.NUMERIC:","case SQLTokenizer.DECIMAL:","return getNumeric();","case SQLTokenizer.CHAR:","case SQLTokenizer.NCHAR:","case SQLTokenizer.VARCHAR:","case SQLTokenizer.NVARCHAR:","case SQLTokenizer.LONGNVARCHAR:","case SQLTokenizer.LONGVARCHAR:"],} ,{"occurences": [[317, 11, "/src/smallsql/database/ExpressionArithmetic.java"], [270, 11, "/src/smallsql/database/ExpressionArithmetic.java"], ], "code":  ["","return getIntImpl();","case SQLTokenizer.BIGINT:","return getLongImpl();","case SQLTokenizer.REAL:","return getFloatImpl();","case SQLTokenizer.FLOAT:","case SQLTokenizer.DOUBLE:","case SQLTokenizer.MONEY:","case SQLTokenizer.SMALLMONEY:","case SQLTokenizer.NUMERIC:","case SQLTokenizer.DECIMAL:"],} ,{"occurences": [[316, 13, "/src/smallsql/junit/BenchTest.java"], [202, 13, "/src/smallsql/junit/BenchTest.java"], ], "code":  ["","Statement st1 = con.createStatement();","ResultSet rs = st1.executeQuery( \"SELECT count(*) FROM \" + tableName);","rs.next();","int count = rs.getInt(1);","if (count != rowCount){","","if (count == 0){","createTestDataWithClassicInsert( con );","rs = st1.executeQuery( \"SELECT count(*) FROM \" + tableName);","rs.next();","count = rs.getInt(1);","}","if (count != rowCount){"],} ,{"occurences": [[-10, 13, "/src/smallsql/junit/TestThreads.java"], [-7, 13, "/src/smallsql/database/IndexNode.java"], ], "code":  ["","private static TestValue a(String dataType, Object small, Object large){","TestValue value = new TestValue();","value.dataType  = dataType;","value.small     = small;","value.large     = large;","return value;","}","private static class TestValue{","String dataType;","Object small;","Object large;","}","}"],} ,{"occurences": [[128, 25, "/src/smallsql/junit/TestResultSet.java"], [85, 25, "/src/smallsql/junit/TestResultSet.java"], [136, 17, "/src/smallsql/junit/TestResultSet.java"], [93, 17, "/src/smallsql/junit/TestResultSet.java"], ], "code":  ["","assertEquals(\"getRow\", 1, rs.getRow() );","","assertFalse(\"previous\", rs.previous() );","assertEquals(\"getRow\", 0, rs.getRow() );","assertTrue(\"isBeforeFirst\", rs.isBeforeFirst() );","assertFalse(\"isAfterLast\", rs.isAfterLast() );","","assertTrue(\"last\", rs.last() );","assertEquals(\"getRow\", 1, rs.getRow() );","assertTrue(\"isLast\", rs.isLast() );","","rs.afterLast();","assertFalse(\"isBeforeFirst\", rs.isBeforeFirst() );","assertTrue(\"isAfterLast\", rs.isAfterLast() );","assertEquals(\"getRow\", 0, rs.getRow() );","}",""],} ,{"occurences": [[65, 25, "/src/smallsql/database/ExpressionFunctionReturnString.java"], [61, 25, "/src/smallsql/database/ExpressionFunctionReturnP1StringAndBinary.java"], ], "code":  ["","final int getInt() throws Exception {","if(isNull()) return 0;","return Integer.parseInt(getString().trim());","}","final long getLong() throws Exception {","if(isNull()) return 0;","return Long.parseLong(getString().trim());","}","final float getFloat() throws Exception {","if(isNull()) return 0;","return Float.parseFloat(getString().trim());","}","final double getDouble() throws Exception {","if(isNull()) return 0;","return Double.parseDouble(getString().trim());","}","final long getMoney() throws Exception {","if(isNull()) return 0;","return Money.parseMoney(getString().trim());","}","final MutableNumeric getNumeric() throws Exception {","if(isNull()) return null;","return new MutableNumeric(getString().trim());","}","final Object getObject() throws Exception {"],} ,{"occurences": [[690, 17, "/src/smallsql/database/StoreImpl.java"], [1485, 17, "/src/smallsql/database/StoreImpl.java"], ], "code":  ["","case SQLTokenizer.SMALLDATETIME:","offset += 4;","break;","case SQLTokenizer.BIGINT:","case SQLTokenizer.FLOAT:","case SQLTokenizer.DOUBLE:","case SQLTokenizer.MONEY:","case SQLTokenizer.JAVA_OBJECT:","case SQLTokenizer.LONGVARBINARY:","case SQLTokenizer.BLOB:","case SQLTokenizer.CLOB:","case SQLTokenizer.NCLOB:","case SQLTokenizer.LONGNVARCHAR:","case SQLTokenizer.LONGVARCHAR:","case SQLTokenizer.TIMESTAMP:","offset += 8;","break;"],} ,{"occurences": [[420, 12, "/src/smallsql/junit/BenchTest.java"], [474, 12, "/src/smallsql/junit/BenchTest.java"], ], "code":  ["","pr.setInt   (  7 , i );","pr.setDouble(  8 , 23.45 );","pr.setDouble(  9 , 567.45 );","pr.setFloat (  10 , (float)78.89 );","pr.setTime  (  11, new Time( System.currentTimeMillis() ) );","pr.setShort (  12, (short)23456 );","pr.setFloat (  13, (float)34.56 );","pr.setString(  14, \"sysname (30) NULL\" );","pr.setString(  15 , \"text NULL\" );","pr.setByte  (  16, (byte)28 );","pr.setBytes (  17, byteArray );","pr.setString(  18, \"varchar (255) NULL\" );"],} ,{"occurences": [[490, 16, "/src/smallsql/database/ExpressionArithmetic.java"], [64, 16, "/src/smallsql/database/ExpressionFunctionReturnP1.java"], ], "code":  ["","return new Float( getFloat() );","case SQLTokenizer.FLOAT:","case SQLTokenizer.DOUBLE:","return new Double( getDouble() );","case SQLTokenizer.MONEY:","case SQLTokenizer.SMALLMONEY:","return Money.createFromUnscaledValue( getMoney() );","case SQLTokenizer.NUMERIC:","case SQLTokenizer.DECIMAL:","return getNumeric();","case SQLTokenizer.CHAR:","case SQLTokenizer.NCHAR:","case SQLTokenizer.VARCHAR:","case SQLTokenizer.NVARCHAR:","case SQLTokenizer.LONGNVARCHAR:","case SQLTokenizer.LONGVARCHAR:"],} ,{"occurences": [[417, 15, "/src/smallsql/junit/BenchTest.java"], [471, 15, "/src/smallsql/junit/BenchTest.java"], ], "code":  ["","pr.setFloat (  4, (float)1234.56789 );","pr.setFloat (  5 , (float)9876.54321 );","pr.setBytes (  6, largeByteArray );","pr.setInt   (  7 , i );","pr.setDouble(  8 , 23.45 );","pr.setDouble(  9 , 567.45 );","pr.setFloat (  10 , (float)78.89 );","pr.setTime  (  11, new Time( System.currentTimeMillis() ) );","pr.setShort (  12, (short)23456 );","pr.setFloat (  13, (float)34.56 );","pr.setString(  14, \"sysname (30) NULL\" );","pr.setString(  15 , \"text NULL\" );","pr.setByte  (  16, (byte)28 );","pr.setBytes (  17, byteArray );","pr.setString(  18, \"varchar (255) NULL\" );"],} ,{"occurences": [[62, 28, "/src/smallsql/database/ExpressionFunctionReturnString.java"], [58, 28, "/src/smallsql/database/ExpressionFunctionReturnP1StringAndBinary.java"], ], "code":  ["","if(isNull()) return false;","return Utils.string2boolean(getString().trim());","}","final int getInt() throws Exception {","if(isNull()) return 0;","return Integer.parseInt(getString().trim());","}","final long getLong() throws Exception {","if(isNull()) return 0;","return Long.parseLong(getString().trim());","}","final float getFloat() throws Exception {","if(isNull()) return 0;","return Float.parseFloat(getString().trim());","}","final double getDouble() throws Exception {","if(isNull()) return 0;","return Double.parseDouble(getString().trim());","}","final long getMoney() throws Exception {","if(isNull()) return 0;","return Money.parseMoney(getString().trim());","}","final MutableNumeric getNumeric() throws Exception {","if(isNull()) return null;","return new MutableNumeric(getString().trim());","}","final Object getObject() throws Exception {"],} ,{"occurences": [[488, 18, "/src/smallsql/database/ExpressionArithmetic.java"], [62, 18, "/src/smallsql/database/ExpressionFunctionReturnP1.java"], ], "code":  ["","return new Long( getLong() );","case SQLTokenizer.REAL:","return new Float( getFloat() );","case SQLTokenizer.FLOAT:","case SQLTokenizer.DOUBLE:","return new Double( getDouble() );","case SQLTokenizer.MONEY:","case SQLTokenizer.SMALLMONEY:","return Money.createFromUnscaledValue( getMoney() );","case SQLTokenizer.NUMERIC:","case SQLTokenizer.DECIMAL:","return getNumeric();","case SQLTokenizer.CHAR:","case SQLTokenizer.NCHAR:","case SQLTokenizer.VARCHAR:","case SQLTokenizer.NVARCHAR:","case SQLTokenizer.LONGNVARCHAR:","case SQLTokenizer.LONGVARCHAR:"],} ,{"occurences": [[482, 24, "/src/smallsql/database/ExpressionArithmetic.java"], [56, 24, "/src/smallsql/database/ExpressionFunctionReturnP1.java"], ], "code":  ["","return getBytes();","case SQLTokenizer.TINYINT:","case SQLTokenizer.SMALLINT:","case SQLTokenizer.INT:","return new Integer( getInt() );","case SQLTokenizer.BIGINT:","return new Long( getLong() );","case SQLTokenizer.REAL:","return new Float( getFloat() );","case SQLTokenizer.FLOAT:","case SQLTokenizer.DOUBLE:","return new Double( getDouble() );","case SQLTokenizer.MONEY:","case SQLTokenizer.SMALLMONEY:","return Money.createFromUnscaledValue( getMoney() );","case SQLTokenizer.NUMERIC:","case SQLTokenizer.DECIMAL:","return getNumeric();","case SQLTokenizer.CHAR:","case SQLTokenizer.NCHAR:","case SQLTokenizer.VARCHAR:","case SQLTokenizer.NVARCHAR:","case SQLTokenizer.LONGNVARCHAR:","case SQLTokenizer.LONGVARCHAR:"],} ,{"occurences": [[272, 12, "/src/smallsql/database/SSStatement.java"], [250, 12, "/src/smallsql/database/SSPreparedStatement.java"], ], "code":  ["","if(failed == null){","failed = new BatchUpdateException(ex.getMessage(), ex.getSQLState(), ex.getErrorCode(), result);","failed.initCause(ex);","}","failed.setNextException(ex);","}","}","batches.clear();","if(failed != null)","throw failed;","return result;","}"],} ,{"occurences": [[692, 15, "/src/smallsql/database/StoreImpl.java"], [1487, 15, "/src/smallsql/database/StoreImpl.java"], [684, 23, "/src/smallsql/database/StoreImpl.java"], [1479, 23, "/src/smallsql/database/StoreImpl.java"], ], "code":  ["","break;","case SQLTokenizer.BIGINT:","case SQLTokenizer.FLOAT:","case SQLTokenizer.DOUBLE:","case SQLTokenizer.MONEY:","case SQLTokenizer.JAVA_OBJECT:","case SQLTokenizer.LONGVARBINARY:","case SQLTokenizer.BLOB:","case SQLTokenizer.CLOB:","case SQLTokenizer.NCLOB:","case SQLTokenizer.LONGNVARCHAR:","case SQLTokenizer.LONGVARCHAR:","case SQLTokenizer.TIMESTAMP:","offset += 8;","break;"],} ,{"occurences": [[63, 27, "/src/smallsql/database/ExpressionFunctionReturnString.java"], [59, 27, "/src/smallsql/database/ExpressionFunctionReturnP1StringAndBinary.java"], ], "code":  ["","return Utils.string2boolean(getString().trim());","}","final int getInt() throws Exception {","if(isNull()) return 0;","return Integer.parseInt(getString().trim());","}","final long getLong() throws Exception {","if(isNull()) return 0;","return Long.parseLong(getString().trim());","}","final float getFloat() throws Exception {","if(isNull()) return 0;","return Float.parseFloat(getString().trim());","}","final double getDouble() throws Exception {","if(isNull()) return 0;","return Double.parseDouble(getString().trim());","}","final long getMoney() throws Exception {","if(isNull()) return 0;","return Money.parseMoney(getString().trim());","}","final MutableNumeric getNumeric() throws Exception {","if(isNull()) return null;","return new MutableNumeric(getString().trim());","}","final Object getObject() throws Exception {"],} ,{"occurences": [[691, 16, "/src/smallsql/database/StoreImpl.java"], [1486, 16, "/src/smallsql/database/StoreImpl.java"], ], "code":  ["","offset += 4;","break;","case SQLTokenizer.BIGINT:","case SQLTokenizer.FLOAT:","case SQLTokenizer.DOUBLE:","case SQLTokenizer.MONEY:","case SQLTokenizer.JAVA_OBJECT:","case SQLTokenizer.LONGVARBINARY:","case SQLTokenizer.BLOB:","case SQLTokenizer.CLOB:","case SQLTokenizer.NCLOB:","case SQLTokenizer.LONGNVARCHAR:","case SQLTokenizer.LONGVARCHAR:","case SQLTokenizer.TIMESTAMP:","offset += 8;","break;"],} ,{"occurences": [[77, 13, "/src/smallsql/database/ExpressionFunctionReturnString.java"], [73, 13, "/src/smallsql/database/ExpressionFunctionReturnP1StringAndBinary.java"], ], "code":  ["","final double getDouble() throws Exception {","if(isNull()) return 0;","return Double.parseDouble(getString().trim());","}","final long getMoney() throws Exception {","if(isNull()) return 0;","return Money.parseMoney(getString().trim());","}","final MutableNumeric getNumeric() throws Exception {","if(isNull()) return null;","return new MutableNumeric(getString().trim());","}","final Object getObject() throws Exception {"],} ,{"occurences": [[79, 11, "/src/smallsql/database/ExpressionFunctionReturnString.java"], [75, 11, "/src/smallsql/database/ExpressionFunctionReturnP1StringAndBinary.java"], ], "code":  ["","return Double.parseDouble(getString().trim());","}","final long getMoney() throws Exception {","if(isNull()) return 0;","return Money.parseMoney(getString().trim());","}","final MutableNumeric getNumeric() throws Exception {","if(isNull()) return null;","return new MutableNumeric(getString().trim());","}","final Object getObject() throws Exception {"],} ,{"occurences": [[160, 16, "/src/smallsql/junit/TestThreads.java"], [112, 16, "/src/smallsql/junit/TestThreads.java"], [57, 11, "/src/smallsql/junit/TestThreads.java"], ], "code":  ["","thread.start();","}","","for(int i = 0; i \< threadList.size(); i++){","Thread thread = (Thread)threadList.get(i);","thread.join(5000);","}","","if(throwable != null){","throw throwable;","}"],} ,{"occurences": [[122, 16, "/src/smallsql/junit/BenchTest.java"], [181, 16, "/src/smallsql/junit/BenchTest.java"], ], "code":  ["","int count = rs.getInt(1);","if (count != rowCount)","System.out.println( \"  Failed: Only \" + count + \" rows were inserted.\");","else System.out.println( \"  Test time: \" + time + \" ms\");","st.close();","}catch(Exception e){","System.out.println(\"  Failed:\"+e);","}finally{","System.out.println();","System.out.println(\"===================================================================\");","}","}","","","",""],} ,{"occurences": [[635, 14, "/src/smallsql/junit/BenchTest.java"], [675, 14, "/src/smallsql/junit/BenchTest.java"], ], "code":  ["","fis.close();","java.io.File file = new java.io.File(tableName+\".bin\");","file.delete();","}catch(Exception e){","System.out.println(\"  Failed:\"+e);","}finally{","System.out.println();","System.out.println(\"===================================================================\");","}","}","","","",""],} ,{"occurences": [[46, 14, "/src/smallsql/database/ExpressionFunctionRound.java"], [46, 14, "/src/smallsql/database/ExpressionFunctionTruncate.java"], ], "code":  ["","final int places = param2.getInt();","double value = param1.getDouble();","long factor = 1;","if(places \> 0){","for(int i=0; i\<places; i++){","factor *= 10;","}","value *= factor;","}else{","for(int i=0; i\>places; i--){","factor *= 10;","}","value /= factor;","}"],} ,{"occurences": [[138, 15, "/src/smallsql/junit/TestResultSet.java"], [95, 15, "/src/smallsql/junit/TestResultSet.java"], ], "code":  ["","assertFalse(\"previous\", rs.previous() );","assertEquals(\"getRow\", 0, rs.getRow() );","assertTrue(\"isBeforeFirst\", rs.isBeforeFirst() );","assertFalse(\"isAfterLast\", rs.isAfterLast() );","","assertTrue(\"last\", rs.last() );","assertEquals(\"getRow\", 1, rs.getRow() );","assertTrue(\"isLast\", rs.isLast() );","","rs.afterLast();","assertFalse(\"isBeforeFirst\", rs.isBeforeFirst() );","assertTrue(\"isAfterLast\", rs.isAfterLast() );","assertEquals(\"getRow\", 0, rs.getRow() );","}",""],} ,{"occurences": [[213, 12, "/src/smallsql/junit/TestOrderBy.java"], [241, 12, "/src/smallsql/junit/TestOrderBy.java"], ], "code":  ["","while(oldValue != null && rs.next()){","String newValue = rs.getString(\"v\");","if(newValue != null){","assertTrue( oldValue.compareTo( newValue ) \> 0 );","count++;","}","oldValue = newValue;","}","assertNull(oldValue);","assertFalse( rs.next() );","assertEquals( valueCount, count );","}"],} ,{"occurences": [[637, 12, "/src/smallsql/junit/BenchTest.java"], [677, 12, "/src/smallsql/junit/BenchTest.java"], ], "code":  ["","file.delete();","}catch(Exception e){","System.out.println(\"  Failed:\"+e);","}finally{","System.out.println();","System.out.println(\"===================================================================\");","}","}","","","",""],} ,{"occurences": [[63, 14, "/src/smallsql/junit/TestOperatoren.java"], [65, 14, "/src/smallsql/junit/TestJoins.java"], ], "code":  ["","a(\"varchar2(100)\"     , new String(\"abc\"),      new String(\"qwert\")),","a(\"nvarchar2(100)\"    , new String(\"abc\"),      new String(\"qwert\")),","a(\"character(100)\"    , new String(\"abc\"),      new String(\"qwert\")),","a(\"char(100)\"         , new String(\"abc\"),      new String(\"qwert\")),","a(\"nchar(100)\"        , new String(\"abc\"),      new String(\"qwert\")),","a(\"text\"              , new String(\"abc\"),      new String(\"qwert\")),","a(\"ntext\"             , new String(\"abc\"),      new String(\"qwert\")),","a(\"date\"              , new Date(99, 1,1),      new Date(99, 2,2)),","a(\"time\"              , new Time(9, 1,1),       new Time(9, 2,2)),","a(\"timestamp\"         , new Timestamp(99, 1,1,0,0,0,0),      new Timestamp(99, 2,2,0,0,0,0)),","a(\"datetime\"          , new Timestamp(99, 1,1,0,0,0,0),      new Timestamp(99, 2,2,0,0,0,0)),","a(\"smalldatetime\"     , new Timestamp(99, 1,1,0,0,0,0),      new Timestamp(99, 2,2,0,0,0,0)),","a(\"binary(100)\"       , new byte[]{12, 45, 1},  new byte[]{12, 45, 2, 56, 89}),","a(\"varbinary(100)\"    , new byte[]{12, 45, 1},  new byte[]{12, 45, 2, 56, 89}),"],} ,{"occurences": [[688, 19, "/src/smallsql/database/StoreImpl.java"], [1483, 19, "/src/smallsql/database/StoreImpl.java"], ], "code":  ["","case SQLTokenizer.TIME:","case SQLTokenizer.DATE:","case SQLTokenizer.SMALLDATETIME:","offset += 4;","break;","case SQLTokenizer.BIGINT:","case SQLTokenizer.FLOAT:","case SQLTokenizer.DOUBLE:","case SQLTokenizer.MONEY:","case SQLTokenizer.JAVA_OBJECT:","case SQLTokenizer.LONGVARBINARY:","case SQLTokenizer.BLOB:","case SQLTokenizer.CLOB:","case SQLTokenizer.NCLOB:","case SQLTokenizer.LONGNVARCHAR:","case SQLTokenizer.LONGVARCHAR:","case SQLTokenizer.TIMESTAMP:","offset += 8;","break;"],} ,{"occurences": [[221, 11, "/src/smallsql/database/ExpressionArithmetic.java"], [310, 18, "/src/smallsql/database/ExpressionArithmetic.java"], [263, 18, "/src/smallsql/database/ExpressionArithmetic.java"], [476, 30, "/src/smallsql/database/ExpressionArithmetic.java"], [50, 30, "/src/smallsql/database/ExpressionFunctionReturnP1.java"], ], "code":  ["","switch(dataType){","case SQLTokenizer.BIT:","case SQLTokenizer.BOOLEAN:","return getBoolean() ? 1 : 0;","case SQLTokenizer.TINYINT:","case SQLTokenizer.SMALLINT:","case SQLTokenizer.INT:","return getIntImpl();","case SQLTokenizer.BIGINT:","return getLongImpl();","case SQLTokenizer.REAL:"],} ,{"occurences": [[151, 14, "/src/smallsql/database/Where.java"], [114, 14, "/src/smallsql/database/Distinct.java"], ], "code":  ["","final long getRowPosition() {","return rowSource.getRowPosition();","}","final void setRowPosition(long rowPosition) throws Exception {","rowSource.setRowPosition(rowPosition);","}","final void nullRow() {","rowSource.nullRow();","row = 0;","}","final void noRow() {","rowSource.noRow();","row = 0;","}"],} ,{"occurences": [[360, 11, "/src/smallsql/junit/BenchTest.java"], [601, 11, "/src/smallsql/junit/BenchTest.java"], [238, 12, "/src/smallsql/junit/BenchTest.java"], [126, 12, "/src/smallsql/junit/BenchTest.java"], [185, 12, "/src/smallsql/junit/BenchTest.java"], [151, 12, "/src/smallsql/junit/BenchTest.java"], ], "code":  ["","st.close();","}catch(Exception e){","System.out.println(\"  Failed:\"+e);","}finally{","System.out.println();","System.out.println(\"===================================================================\");","}","}","","",""],} ,{"occurences": [[154, 22, "/src/smallsql/junit/TestThreads.java"], [106, 22, "/src/smallsql/junit/TestThreads.java"], [51, 17, "/src/smallsql/junit/TestThreads.java"], ], "code":  ["","}catch(Throwable ex){","throwable = ex;","}","}","});","threadList.add(thread);","thread.start();","}","","for(int i = 0; i \< threadList.size(); i++){","Thread thread = (Thread)threadList.get(i);","thread.join(5000);","}","","if(throwable != null){","throw throwable;","}"],} ,{"occurences": [[124, 14, "/src/smallsql/junit/BenchTest.java"], [183, 14, "/src/smallsql/junit/BenchTest.java"], ], "code":  ["","System.out.println( \"  Failed: Only \" + count + \" rows were inserted.\");","else System.out.println( \"  Test time: \" + time + \" ms\");","st.close();","}catch(Exception e){","System.out.println(\"  Failed:\"+e);","}finally{","System.out.println();","System.out.println(\"===================================================================\");","}","}","","","",""],} ,{"occurences": [[210, 15, "/src/smallsql/junit/TestOrderBy.java"], [238, 15, "/src/smallsql/junit/TestOrderBy.java"], [341, 13, "/src/smallsql/junit/TestOrderBy.java"], [426, 13, "/src/smallsql/junit/TestOrderBy.java"], ], "code":  ["","assertTrue( rs.next() );","oldValue = (Integer)rs.getObject(\"i\");","assertNull(oldValue);","assertTrue( rs.next() );","oldValue = (Integer)rs.getObject(\"i\");","int count = 1;","while(rs.next()){","assertTrue( oldValue.compareTo( (Integer)rs.getObject(\"i\") ) \< 0 );","oldValue = (Integer)rs.getObject(\"i\");","count++;","}","assertEquals( valueCount, count );","}"],} ,{"occurences": [[694, 13, "/src/smallsql/database/StoreImpl.java"], [1489, 13, "/src/smallsql/database/StoreImpl.java"], [491, 15, "/src/smallsql/database/ExpressionArithmetic.java"], [65, 15, "/src/smallsql/database/ExpressionFunctionReturnP1.java"], ], "code":  ["","case SQLTokenizer.FLOAT:","case SQLTokenizer.DOUBLE:","case SQLTokenizer.MONEY:","case SQLTokenizer.JAVA_OBJECT:","case SQLTokenizer.LONGVARBINARY:","case SQLTokenizer.BLOB:","case SQLTokenizer.CLOB:","case SQLTokenizer.NCLOB:","case SQLTokenizer.LONGNVARCHAR:","case SQLTokenizer.LONGVARCHAR:","case SQLTokenizer.TIMESTAMP:","offset += 8;","break;"],} ,{"occurences": [[445, 11, "/src/smallsql/junit/BenchTest.java"], [239, 11, "/src/smallsql/junit/BenchTest.java"], [638, 11, "/src/smallsql/junit/BenchTest.java"], [678, 11, "/src/smallsql/junit/BenchTest.java"], [186, 11, "/src/smallsql/junit/BenchTest.java"], [152, 11, "/src/smallsql/junit/BenchTest.java"], [555, 11, "/src/smallsql/junit/BenchTest.java"], [127, 11, "/src/smallsql/junit/BenchTest.java"], ], "code":  ["","}catch(Exception e){","System.out.println(\"  Failed:\"+e);","}finally{","System.out.println();","System.out.println(\"===================================================================\");","}","}","","","",""],} ,{"occurences": [[748, 11, "/src/smallsql/junit/TestOrderBy.java"], [717, 11, "/src/smallsql/junit/TestOrderBy.java"], ], "code":  ["","while(rs.previous()) count++;","assertEquals( valueCount, count );","rs.beforeFirst();","count = -1;","while(rs.next()) count++;","assertEquals( valueCount, count );","rs.beforeFirst();","count = -1;","while(rs.next()) count++;","assertEquals( valueCount, count );","}"],} ,{"occurences": [[45, 13, "/src/smallsql/junit/TestOperatoren.java"], [48, 13, "/src/smallsql/junit/TestJoins.java"], ], "code":  ["","a(\"tinyint\"           , new Byte( (byte)3),     new Byte( (byte)4)),","a(\"byte\"              , new Byte( (byte)3),     new Byte( (byte)4)),","a(\"smallint\"          , new Short( (short)3),   new Short( (short)4)),","a(\"int\"               , new Integer(3),         new Integer(4)),","a(\"bigint\"            , new Long(3),            new Long(4)),","a(\"real\"              , new Float(3.45),        new Float(4.56)),","a(\"float\"             , new Float(3.45),        new Float(4.56)),","a(\"double\"            , new Double(3.45),       new Double(4.56)),","a(\"smallmoney\"        , new Float(3.45),        new Float(4.56)),","a(\"money\"             , new Float(3.45),        new Float(4.56)),","a(\"money\"             , new Double(3.45),       new Double(4.56)),","a(\"numeric(19,2)\"     , new BigDecimal(\"3.45\"), new BigDecimal(\"4.56\")),","a(\"decimal(19,2)\"     , new BigDecimal(\"3.45\"), new BigDecimal(\"4.56\")),"],} ,{"occurences": [[138, 17, "/src/smallsql/junit/TestJoins.java"], [124, 17, "/src/smallsql/junit/TestOperatoren.java"], [144, 11, "/src/smallsql/junit/TestJoins.java"], [130, 11, "/src/smallsql/junit/TestOperatoren.java"], ], "code":  ["","pr.setObject( 2, testValue.small);","pr.execute();","pr.setObject( 1, null);","pr.setObject( 2, testValue.small);","pr.execute();","pr.setObject( 1, testValue.small);","pr.setObject( 2, null);","pr.execute();","pr.setObject( 1, null);","pr.setObject( 2, null);","pr.execute();"],} ,{"occurences": [[746, 13, "/src/smallsql/junit/TestOrderBy.java"], [715, 13, "/src/smallsql/junit/TestOrderBy.java"], ], "code":  ["","rs.last();","count = 0;","while(rs.previous()) count++;","assertEquals( valueCount, count );","rs.beforeFirst();","count = -1;","while(rs.next()) count++;","assertEquals( valueCount, count );","rs.beforeFirst();","count = -1;","while(rs.next()) count++;","assertEquals( valueCount, count );","}"],} ,{"occurences": [[421, 12, "/src/smallsql/junit/BenchTest.java"], [529, 12, "/src/smallsql/junit/BenchTest.java"], [475, 11, "/src/smallsql/junit/BenchTest.java"], ], "code":  ["","pr.setDouble(  8 , 23.45 );","pr.setDouble(  9 , 567.45 );","pr.setFloat (  10 , (float)78.89 );","pr.setTime  (  11, new Time( System.currentTimeMillis() ) );","pr.setShort (  12, (short)23456 );","pr.setFloat (  13, (float)34.56 );","pr.setString(  14, \"sysname (30) NULL\" );","pr.setString(  15 , \"text NULL\" );","pr.setByte  (  16, (byte)28 );","pr.setBytes (  17, byteArray );","pr.setString(  18, \"varchar (255) NULL\" );"],} ,{"occurences": [[687, 20, "/src/smallsql/database/StoreImpl.java"], [1482, 20, "/src/smallsql/database/StoreImpl.java"], [495, 11, "/src/smallsql/database/ExpressionArithmetic.java"], [69, 11, "/src/smallsql/database/ExpressionFunctionReturnP1.java"], ], "code":  ["","case SQLTokenizer.SMALLMONEY:","return Money.createFromUnscaledValue( getMoney() );","case SQLTokenizer.NUMERIC:","case SQLTokenizer.DECIMAL:","return getNumeric();","case SQLTokenizer.CHAR:","case SQLTokenizer.NCHAR:","case SQLTokenizer.VARCHAR:","case SQLTokenizer.NVARCHAR:","case SQLTokenizer.LONGNVARCHAR:","case SQLTokenizer.LONGVARCHAR:"],} ,{"occurences": [[120, 11, "/src/smallsql/database/IndexScrollStatus.java"], [89, 11, "/src/smallsql/database/IndexScrollStatus.java"], ], "code":  ["","if(status.nodeValue instanceof IndexNode){","level++;","nodeStack.push(","new IndexNodeScrollStatus( (IndexNode)status.nodeValue,","(expressions.get(level).getAlias() != SQLTokenizer.DESC_STR),","scroll, level));","continue;","}else","return getReturnValue(status.nodeValue);","}",""],} ,{"occurences": [[744, 15, "/src/smallsql/junit/TestOrderBy.java"], [713, 15, "/src/smallsql/junit/TestOrderBy.java"], ], "code":  ["","rs.previous();","","rs.last();","count = 0;","while(rs.previous()) count++;","assertEquals( valueCount, count );","rs.beforeFirst();","count = -1;","while(rs.next()) count++;","assertEquals( valueCount, count );","rs.beforeFirst();","count = -1;","while(rs.next()) count++;","assertEquals( valueCount, count );","}"],} ,{"occurences": [[47, 11, "/src/smallsql/junit/TestOperatoren.java"], [50, 11, "/src/smallsql/junit/TestJoins.java"], ], "code":  ["","a(\"smallint\"          , new Short( (short)3),   new Short( (short)4)),","a(\"int\"               , new Integer(3),         new Integer(4)),","a(\"bigint\"            , new Long(3),            new Long(4)),","a(\"real\"              , new Float(3.45),        new Float(4.56)),","a(\"float\"             , new Float(3.45),        new Float(4.56)),","a(\"double\"            , new Double(3.45),       new Double(4.56)),","a(\"smallmoney\"        , new Float(3.45),        new Float(4.56)),","a(\"money\"             , new Float(3.45),        new Float(4.56)),","a(\"money\"             , new Double(3.45),       new Double(4.56)),","a(\"numeric(19,2)\"     , new BigDecimal(\"3.45\"), new BigDecimal(\"4.56\")),","a(\"decimal(19,2)\"     , new BigDecimal(\"3.45\"), new BigDecimal(\"4.56\")),"],} ,{"occurences": [[212, 13, "/src/smallsql/junit/TestOrderBy.java"], [240, 13, "/src/smallsql/junit/TestOrderBy.java"], ], "code":  ["","int count = 1;","while(oldValue != null && rs.next()){","String newValue = rs.getString(\"v\");","if(newValue != null){","assertTrue( oldValue.compareTo( newValue ) \> 0 );","count++;","}","oldValue = newValue;","}","assertNull(oldValue);","assertFalse( rs.next() );","assertEquals( valueCount, count );","}"],} ,{"occurences": [[220, 12, "/src/smallsql/database/ExpressionArithmetic.java"], [309, 19, "/src/smallsql/database/ExpressionArithmetic.java"], [262, 19, "/src/smallsql/database/ExpressionArithmetic.java"], [475, 31, "/src/smallsql/database/ExpressionArithmetic.java"], [49, 31, "/src/smallsql/database/ExpressionFunctionReturnP1.java"], ], "code":  ["","int dataType = getDataType();","switch(dataType){","case SQLTokenizer.BIT:","case SQLTokenizer.BOOLEAN:","return getBoolean() ? 1 : 0;","case SQLTokenizer.TINYINT:","case SQLTokenizer.SMALLINT:","case SQLTokenizer.INT:","return getIntImpl();","case SQLTokenizer.BIGINT:","return getLongImpl();","case SQLTokenizer.REAL:"],} ,{"occurences": [[118, 13, "/src/smallsql/database/IndexScrollStatus.java"], [87, 13, "/src/smallsql/database/IndexScrollStatus.java"], ], "code":  ["","if(idx == -1){","if(status.nodeValue != null){","if(status.nodeValue instanceof IndexNode){","level++;","nodeStack.push(","new IndexNodeScrollStatus( (IndexNode)status.nodeValue,","(expressions.get(level).getAlias() != SQLTokenizer.DESC_STR),","scroll, level));","continue;","}else","return getReturnValue(status.nodeValue);","}",""],} ,{"occurences": [[318, 11, "/src/smallsql/junit/BenchTest.java"], [204, 11, "/src/smallsql/junit/BenchTest.java"], [121, 17, "/src/smallsql/junit/BenchTest.java"], [180, 17, "/src/smallsql/junit/BenchTest.java"], [743, 16, "/src/smallsql/junit/TestOrderBy.java"], [712, 16, "/src/smallsql/junit/TestOrderBy.java"], [742, 17, "/src/smallsql/junit/TestOrderBy.java"], [711, 17, "/src/smallsql/junit/TestOrderBy.java"], ], "code":  ["","rs.next();","int count = rs.getInt(1);","if (count != rowCount){","","if (count == 0){","createTestDataWithClassicInsert( con );","rs = st1.executeQuery( \"SELECT count(*) FROM \" + tableName);","rs.next();","count = rs.getInt(1);","}","if (count != rowCount){"],} ,{"occurences": [[140, 13, "/src/smallsql/junit/TestResultSet.java"], [97, 13, "/src/smallsql/junit/TestResultSet.java"], ], "code":  ["","assertTrue(\"isBeforeFirst\", rs.isBeforeFirst() );","assertFalse(\"isAfterLast\", rs.isAfterLast() );","","assertTrue(\"last\", rs.last() );","assertEquals(\"getRow\", 1, rs.getRow() );","assertTrue(\"isLast\", rs.isLast() );","","rs.afterLast();","assertFalse(\"isBeforeFirst\", rs.isBeforeFirst() );","assertTrue(\"isAfterLast\", rs.isAfterLast() );","assertEquals(\"getRow\", 0, rs.getRow() );","}",""],} ,{"occurences": [[695, 12, "/src/smallsql/database/StoreImpl.java"], [1490, 12, "/src/smallsql/database/StoreImpl.java"], [492, 14, "/src/smallsql/database/ExpressionArithmetic.java"], [66, 14, "/src/smallsql/database/ExpressionFunctionReturnP1.java"], ], "code":  ["","case SQLTokenizer.DOUBLE:","case SQLTokenizer.MONEY:","case SQLTokenizer.JAVA_OBJECT:","case SQLTokenizer.LONGVARBINARY:","case SQLTokenizer.BLOB:","case SQLTokenizer.CLOB:","case SQLTokenizer.NCLOB:","case SQLTokenizer.LONGNVARCHAR:","case SQLTokenizer.LONGVARCHAR:","case SQLTokenizer.TIMESTAMP:","offset += 8;","break;"],} ,{"occurences": [[487, 19, "/src/smallsql/database/ExpressionArithmetic.java"], [61, 19, "/src/smallsql/database/ExpressionFunctionReturnP1.java"], [693, 14, "/src/smallsql/database/StoreImpl.java"], [1488, 14, "/src/smallsql/database/StoreImpl.java"], ], "code":  ["","case SQLTokenizer.BIGINT:","case SQLTokenizer.FLOAT:","case SQLTokenizer.DOUBLE:","case SQLTokenizer.MONEY:","case SQLTokenizer.JAVA_OBJECT:","case SQLTokenizer.LONGVARBINARY:","case SQLTokenizer.BLOB:","case SQLTokenizer.CLOB:","case SQLTokenizer.NCLOB:","case SQLTokenizer.LONGNVARCHAR:","case SQLTokenizer.LONGVARCHAR:","case SQLTokenizer.TIMESTAMP:","offset += 8;","break;"],} ,{"occurences": [[378, 11, "/src/smallsql/junit/TestFunctions.java"], [99, 11, "/src/smallsql/junit/TestOperatoren.java"], ], "code":  ["","st.execute(\"drop table \" + table);","st.close();","}catch(Throwable e){","","}","}","public void setUp(){","tearDown();","try{","Connection con = AllTests.getConnection();","Statement st = con.createStatement();"],} ,{"occurences": [[552, 11, "/src/smallsql/database/DateTime.java"], [566, 11, "/src/smallsql/database/DateTime.java"], [601, 11, "/src/smallsql/database/DateTime.java"], [475, 11, "/src/smallsql/database/DateTime.java"], ], "code":  ["","formatNumber( details.year, 4, buf);","buf.append(\'-\');","formatNumber( details.month+1, 2, buf);","buf.append(\'-\');","formatNumber( details.day, 2, buf);","buf.append(\' \');","formatNumber( details.hour, 2, buf);","buf.append(\':\');","formatNumber( details.minute, 2, buf);","buf.append(\':\');","formatNumber( details.second, 2, buf);"],} ,{"occurences": [[139, 16, "/src/smallsql/junit/TestJoins.java"], [125, 16, "/src/smallsql/junit/TestOperatoren.java"], [142, 13, "/src/smallsql/junit/TestJoins.java"], [128, 13, "/src/smallsql/junit/TestOperatoren.java"], [136, 19, "/src/smallsql/junit/TestJoins.java"], [122, 19, "/src/smallsql/junit/TestOperatoren.java"], ], "code":  ["","pr.execute();","pr.setObject( 1, testValue.large);","pr.setObject( 2, testValue.small);","pr.execute();","pr.setObject( 1, null);","pr.setObject( 2, testValue.small);","pr.execute();","pr.setObject( 1, testValue.small);","pr.setObject( 2, null);","pr.execute();","pr.setObject( 1, null);","pr.setObject( 2, null);","pr.execute();"],} ,{"occurences": [[64, 13, "/src/smallsql/junit/TestOperatoren.java"], [66, 13, "/src/smallsql/junit/TestJoins.java"], ], "code":  ["","a(\"nvarchar2(100)\"    , new String(\"abc\"),      new String(\"qwert\")),","a(\"character(100)\"    , new String(\"abc\"),      new String(\"qwert\")),","a(\"char(100)\"         , new String(\"abc\"),      new String(\"qwert\")),","a(\"nchar(100)\"        , new String(\"abc\"),      new String(\"qwert\")),","a(\"text\"              , new String(\"abc\"),      new String(\"qwert\")),","a(\"ntext\"             , new String(\"abc\"),      new String(\"qwert\")),","a(\"date\"              , new Date(99, 1,1),      new Date(99, 2,2)),","a(\"time\"              , new Time(9, 1,1),       new Time(9, 2,2)),","a(\"timestamp\"         , new Timestamp(99, 1,1,0,0,0,0),      new Timestamp(99, 2,2,0,0,0,0)),","a(\"datetime\"          , new Timestamp(99, 1,1,0,0,0,0),      new Timestamp(99, 2,2,0,0,0,0)),","a(\"smalldatetime\"     , new Timestamp(99, 1,1,0,0,0,0),      new Timestamp(99, 2,2,0,0,0,0)),","a(\"binary(100)\"       , new byte[]{12, 45, 1},  new byte[]{12, 45, 2, 56, 89}),","a(\"varbinary(100)\"    , new byte[]{12, 45, 1},  new byte[]{12, 45, 2, 56, 89}),"],} ,{"occurences": [[47, 12, "/src/smallsql/database/MutableLong.java"], [47, 12, "/src/smallsql/database/MutableFloat.java"], ], "code":  ["","this.value = value;","}","public double doubleValue() {","return value;","}","public float floatValue() {","return value;","}","public int intValue() {","return (int)value;","}","public long longValue() {"],} ,{"occurences": [[315, 13, "/src/smallsql/database/ExpressionArithmetic.java"], [268, 13, "/src/smallsql/database/ExpressionArithmetic.java"], [484, 22, "/src/smallsql/database/ExpressionArithmetic.java"], [58, 22, "/src/smallsql/database/ExpressionFunctionReturnP1.java"], ], "code":  ["","case SQLTokenizer.SMALLINT:","case SQLTokenizer.INT:","return getIntImpl();","case SQLTokenizer.BIGINT:","return getLongImpl();","case SQLTokenizer.REAL:","return getFloatImpl();","case SQLTokenizer.FLOAT:","case SQLTokenizer.DOUBLE:","case SQLTokenizer.MONEY:","case SQLTokenizer.SMALLMONEY:","case SQLTokenizer.NUMERIC:","case SQLTokenizer.DECIMAL:"],} ,{"occurences": [[139, 14, "/src/smallsql/junit/TestResultSet.java"], [96, 14, "/src/smallsql/junit/TestResultSet.java"], [133, 20, "/src/smallsql/junit/TestResultSet.java"], [90, 20, "/src/smallsql/junit/TestResultSet.java"], ], "code":  ["","assertEquals(\"getRow\", 0, rs.getRow() );","assertTrue(\"isBeforeFirst\", rs.isBeforeFirst() );","assertFalse(\"isAfterLast\", rs.isAfterLast() );","","assertTrue(\"last\", rs.last() );","assertEquals(\"getRow\", 1, rs.getRow() );","assertTrue(\"isLast\", rs.isLast() );","","rs.afterLast();","assertFalse(\"isBeforeFirst\", rs.isBeforeFirst() );","assertTrue(\"isAfterLast\", rs.isAfterLast() );","assertEquals(\"getRow\", 0, rs.getRow() );","}",""],} ,{"occurences": [[73, 17, "/src/smallsql/database/ExpressionFunctionReturnString.java"], [69, 17, "/src/smallsql/database/ExpressionFunctionReturnP1StringAndBinary.java"], ], "code":  ["","final float getFloat() throws Exception {","if(isNull()) return 0;","return Float.parseFloat(getString().trim());","}","final double getDouble() throws Exception {","if(isNull()) return 0;","return Double.parseDouble(getString().trim());","}","final long getMoney() throws Exception {","if(isNull()) return 0;","return Money.parseMoney(getString().trim());","}","final MutableNumeric getNumeric() throws Exception {","if(isNull()) return null;","return new MutableNumeric(getString().trim());","}","final Object getObject() throws Exception {"],} ,{"occurences": [[-9, 12, "/src/smallsql/junit/TestThreads.java"], [-6, 12, "/src/smallsql/database/IndexNode.java"], ], "code":  ["","TestValue value = new TestValue();","value.dataType  = dataType;","value.small     = small;","value.large     = large;","return value;","}","private static class TestValue{","String dataType;","Object small;","Object large;","}","}"],} ,{"occurences": [[74, 16, "/src/smallsql/database/ExpressionFunctionReturnString.java"], [70, 16, "/src/smallsql/database/ExpressionFunctionReturnP1StringAndBinary.java"], [66, 24, "/src/smallsql/database/ExpressionFunctionReturnString.java"], [62, 24, "/src/smallsql/database/ExpressionFunctionReturnP1StringAndBinary.java"], [78, 12, "/src/smallsql/database/ExpressionFunctionReturnString.java"], [74, 12, "/src/smallsql/database/ExpressionFunctionReturnP1StringAndBinary.java"], [45, 15, "/src/smallsql/database/ExpressionFunctionRound.java"], [45, 15, "/src/smallsql/database/ExpressionFunctionTruncate.java"], [175, 11, "/src/smallsql/database/ExpressionArithmetic.java"], [219, 13, "/src/smallsql/database/ExpressionArithmetic.java"], [308, 20, "/src/smallsql/database/ExpressionArithmetic.java"], [261, 20, "/src/smallsql/database/ExpressionArithmetic.java"], [70, 20, "/src/smallsql/database/ExpressionFunctionReturnString.java"], [66, 20, "/src/smallsql/database/ExpressionFunctionReturnP1StringAndBinary.java"], ], "code":  ["","if(isNull()) return 0;","int dataType = getDataType();","switch(dataType){","case SQLTokenizer.BIT:","case SQLTokenizer.BOOLEAN:","return getBoolean() ? 1 : 0;","case SQLTokenizer.TINYINT:","case SQLTokenizer.SMALLINT:","case SQLTokenizer.INT:","return getIntImpl();","case SQLTokenizer.BIGINT:"],} ,{"occurences": [[600, 12, "/src/smallsql/database/DateTime.java"], [474, 12, "/src/smallsql/database/DateTime.java"], ], "code":  ["","buf.append(\' \');","formatNumber( details.year, 4, buf);","buf.append(\' \');","formatHour12( details.hour, buf );","buf.append(\':\');","formatNumber( details.minute, 2, buf);","buf.append(\':\');","formatNumber( details.second, 2, buf);","buf.append(\':\');","formatMillis( details.millis, buf);","buf.append( details.hour \< 12 ? \"AM\" : \"PM\" );","return buf.toString();"],} ,{"occurences": [[69, 21, "/src/smallsql/database/ExpressionFunctionReturnString.java"], [65, 21, "/src/smallsql/database/ExpressionFunctionReturnP1StringAndBinary.java"], ], "code":  ["","final long getLong() throws Exception {","if(isNull()) return 0;","return Long.parseLong(getString().trim());","}","final float getFloat() throws Exception {","if(isNull()) return 0;","return Float.parseFloat(getString().trim());","}","final double getDouble() throws Exception {","if(isNull()) return 0;","return Double.parseDouble(getString().trim());","}","final long getMoney() throws Exception {","if(isNull()) return 0;","return Money.parseMoney(getString().trim());","}","final MutableNumeric getNumeric() throws Exception {","if(isNull()) return null;","return new MutableNumeric(getString().trim());","}","final Object getObject() throws Exception {"],} ,{"occurences": [[62, 15, "/src/smallsql/junit/TestOperatoren.java"], [64, 15, "/src/smallsql/junit/TestJoins.java"], ], "code":  ["","a(\"nvarchar(100)\"     , new String(\"abc\"),      new String(\"qwert\")),","a(\"varchar2(100)\"     , new String(\"abc\"),      new String(\"qwert\")),","a(\"nvarchar2(100)\"    , new String(\"abc\"),      new String(\"qwert\")),","a(\"character(100)\"    , new String(\"abc\"),      new String(\"qwert\")),","a(\"char(100)\"         , new String(\"abc\"),      new String(\"qwert\")),","a(\"nchar(100)\"        , new String(\"abc\"),      new String(\"qwert\")),","a(\"text\"              , new String(\"abc\"),      new String(\"qwert\")),","a(\"ntext\"             , new String(\"abc\"),      new String(\"qwert\")),","a(\"date\"              , new Date(99, 1,1),      new Date(99, 2,2)),","a(\"time\"              , new Time(9, 1,1),       new Time(9, 2,2)),","a(\"timestamp\"         , new Timestamp(99, 1,1,0,0,0,0),      new Timestamp(99, 2,2,0,0,0,0)),","a(\"datetime\"          , new Timestamp(99, 1,1,0,0,0,0),      new Timestamp(99, 2,2,0,0,0,0)),","a(\"smalldatetime\"     , new Timestamp(99, 1,1,0,0,0,0),      new Timestamp(99, 2,2,0,0,0,0)),","a(\"binary(100)\"       , new byte[]{12, 45, 1},  new byte[]{12, 45, 2, 56, 89}),","a(\"varbinary(100)\"    , new byte[]{12, 45, 1},  new byte[]{12, 45, 2, 56, 89}),"],} ,{"occurences": [[47, 13, "/src/smallsql/database/ExpressionFunctionRound.java"], [47, 13, "/src/smallsql/database/ExpressionFunctionTruncate.java"], ], "code":  ["","double value = param1.getDouble();","long factor = 1;","if(places \> 0){","for(int i=0; i\<places; i++){","factor *= 10;","}","value *= factor;","}else{","for(int i=0; i\>places; i--){","factor *= 10;","}","value /= factor;","}"],} ,{"occurences": [[42, 18, "/src/smallsql/database/ExpressionFunctionRound.java"], [42, 18, "/src/smallsql/database/ExpressionFunctionTruncate.java"], ], "code":  ["","return param1.isNull() || param2.isNull();","}","final double getDouble() throws Exception{","if(isNull()) return 0;","final int places = param2.getInt();","double value = param1.getDouble();","long factor = 1;","if(places \> 0){","for(int i=0; i\<places; i++){","factor *= 10;","}","value *= factor;","}else{","for(int i=0; i\>places; i--){","factor *= 10;","}","value /= factor;","}"],} ,{"occurences": [[317, 12, "/src/smallsql/junit/BenchTest.java"], [203, 12, "/src/smallsql/junit/BenchTest.java"], ], "code":  ["","ResultSet rs = st1.executeQuery( \"SELECT count(*) FROM \" + tableName);","rs.next();","int count = rs.getInt(1);","if (count != rowCount){","","if (count == 0){","createTestDataWithClassicInsert( con );","rs = st1.executeQuery( \"SELECT count(*) FROM \" + tableName);","rs.next();","count = rs.getInt(1);","}","if (count != rowCount){"],} ,{"occurences": [[418, 14, "/src/smallsql/junit/BenchTest.java"], [472, 14, "/src/smallsql/junit/BenchTest.java"], ], "code":  ["","pr.setFloat (  5 , (float)9876.54321 );","pr.setBytes (  6, largeByteArray );","pr.setInt   (  7 , i );","pr.setDouble(  8 , 23.45 );","pr.setDouble(  9 , 567.45 );","pr.setFloat (  10 , (float)78.89 );","pr.setTime  (  11, new Time( System.currentTimeMillis() ) );","pr.setShort (  12, (short)23456 );","pr.setFloat (  13, (float)34.56 );","pr.setString(  14, \"sysname (30) NULL\" );","pr.setString(  15 , \"text NULL\" );","pr.setByte  (  16, (byte)28 );","pr.setBytes (  17, byteArray );","pr.setString(  18, \"varchar (255) NULL\" );"],} ,{"occurences": [[342, 12, "/src/smallsql/junit/TestOrderBy.java"], [427, 12, "/src/smallsql/junit/TestOrderBy.java"], ], "code":  ["","oldValue = (Integer)rs.getObject(\"i\");","assertNull(oldValue);","assertTrue( rs.next() );","oldValue = (Integer)rs.getObject(\"i\");","int count = 1;","while(rs.next()){","assertTrue( oldValue.compareTo( (Integer)rs.getObject(\"i\") ) \< 0 );","oldValue = (Integer)rs.getObject(\"i\");","count++;","}","assertEquals( valueCount, count );","}"],} ,{"occurences": [[493, 13, "/src/smallsql/database/ExpressionArithmetic.java"], [67, 13, "/src/smallsql/database/ExpressionFunctionReturnP1.java"], ], "code":  ["","return new Double( getDouble() );","case SQLTokenizer.MONEY:","case SQLTokenizer.SMALLMONEY:","return Money.createFromUnscaledValue( getMoney() );","case SQLTokenizer.NUMERIC:","case SQLTokenizer.DECIMAL:","return getNumeric();","case SQLTokenizer.CHAR:","case SQLTokenizer.NCHAR:","case SQLTokenizer.VARCHAR:","case SQLTokenizer.NVARCHAR:","case SQLTokenizer.LONGNVARCHAR:","case SQLTokenizer.LONGVARCHAR:"],} ,{"occurences": [[164, 12, "/src/smallsql/junit/TestThreads.java"], [116, 12, "/src/smallsql/junit/TestThreads.java"], ], "code":  ["","Thread thread = (Thread)threadList.get(i);","thread.join(5000);","}","","if(throwable != null){","throw throwable;","}","assertEqualsRsValue(new Integer(200), \"SELECT value FROM ConcurrentWrite\");","}finally{","dropTable(con, \"ConcurrentWrite\");","}","}"],} ,{"occurences": [[481, 25, "/src/smallsql/database/ExpressionArithmetic.java"], [55, 25, "/src/smallsql/database/ExpressionFunctionReturnP1.java"], ], "code":  ["","case SQLTokenizer.VARBINARY:","return getBytes();","case SQLTokenizer.TINYINT:","case SQLTokenizer.SMALLINT:","case SQLTokenizer.INT:","return new Integer( getInt() );","case SQLTokenizer.BIGINT:","return new Long( getLong() );","case SQLTokenizer.REAL:","return new Float( getFloat() );","case SQLTokenizer.FLOAT:","case SQLTokenizer.DOUBLE:","return new Double( getDouble() );","case SQLTokenizer.MONEY:","case SQLTokenizer.SMALLMONEY:","return Money.createFromUnscaledValue( getMoney() );","case SQLTokenizer.NUMERIC:","case SQLTokenizer.DECIMAL:","return getNumeric();","case SQLTokenizer.CHAR:","case SQLTokenizer.NCHAR:","case SQLTokenizer.VARCHAR:","case SQLTokenizer.NVARCHAR:","case SQLTokenizer.LONGNVARCHAR:","case SQLTokenizer.LONGVARCHAR:"],} ,{"occurences": [[-11, 14, "/src/smallsql/junit/TestThreads.java"], [-8, 14, "/src/smallsql/database/IndexNode.java"], [64, 26, "/src/smallsql/database/ExpressionFunctionReturnString.java"], [60, 26, "/src/smallsql/database/ExpressionFunctionReturnP1StringAndBinary.java"], [386, 11, "/src/smallsql/database/Table.java"], [368, 11, "/src/smallsql/database/Table.java"], [76, 14, "/src/smallsql/database/ExpressionFunctionReturnString.java"], [72, 14, "/src/smallsql/database/ExpressionFunctionReturnP1StringAndBinary.java"], [48, 11, "/src/smallsql/database/MutableLong.java"], [48, 11, "/src/smallsql/database/MutableFloat.java"], [150, 15, "/src/smallsql/database/Where.java"], [113, 15, "/src/smallsql/database/Distinct.java"], [56, 11, "/src/smallsql/database/MutableFloat.java"], [56, 11, "/src/smallsql/database/MutableDouble.java"], [72, 18, "/src/smallsql/database/ExpressionFunctionReturnString.java"], [68, 18, "/src/smallsql/database/ExpressionFunctionReturnP1StringAndBinary.java"], [68, 22, "/src/smallsql/database/ExpressionFunctionReturnString.java"], [64, 22, "/src/smallsql/database/ExpressionFunctionReturnP1StringAndBinary.java"], [156, 20, "/src/smallsql/junit/TestThreads.java"], [108, 20, "/src/smallsql/junit/TestThreads.java"], [53, 15, "/src/smallsql/junit/TestThreads.java"], [440, 16, "/src/smallsql/junit/BenchTest.java"], [550, 16, "/src/smallsql/junit/BenchTest.java"], [153, 12, "/src/smallsql/database/Where.java"], [116, 12, "/src/smallsql/database/Distinct.java"], [157, 19, "/src/smallsql/junit/TestThreads.java"], [109, 19, "/src/smallsql/junit/TestThreads.java"], [54, 14, "/src/smallsql/junit/TestThreads.java"], [161, 15, "/src/smallsql/junit/TestThreads.java"], [113, 15, "/src/smallsql/junit/TestThreads.java"], [265, 13, "/src/smallsql/database/SSResultSet.java"], [273, 13, "/src/smallsql/database/SSConnection.java"], [24, 11, "/src/smallsql/database/ExpressionFunctionLog10.java"], [23, 11, "/src/smallsql/database/SmallSQLException.java"], [52, 11, "/src/smallsql/junit/TestMoneyRounding.java"], [67, 13, "/src/smallsql/junit/TestDataTypes.java"], [94, 13, "/src/smallsql/junit/TestOperatoren.java"], [357, 14, "/src/smallsql/junit/BenchTest.java"], [598, 14, "/src/smallsql/junit/BenchTest.java"], [441, 15, "/src/smallsql/junit/BenchTest.java"], [551, 15, "/src/smallsql/junit/BenchTest.java"], [43, 17, "/src/smallsql/database/ExpressionFunctionRound.java"], [43, 17, "/src/smallsql/database/ExpressionFunctionTruncate.java"], ], "code":  ["","}","if(serializeConnections.size() \> 0){","Iterator values = locks.values().iterator();","while(values.hasNext()){","TableStorePage lock = (TableStorePage)values.next();","if(lock.con != con) return null;","}","}","tabLockConnection = con;","tabLockCount++;","TableStorePage lock = new TableStorePage(con, this, LOCK_TAB, page);"],} ,{"occurences": [[134, 21, "/src/smallsql/junit/TestJoins.java"], [120, 21, "/src/smallsql/junit/TestOperatoren.java"], [137, 18, "/src/smallsql/junit/TestJoins.java"], [123, 18, "/src/smallsql/junit/TestOperatoren.java"], ], "code":  ["","pr.setObject( 1, testValue.small);","pr.setObject( 2, testValue.small);","pr.execute();","pr.setObject( 1, testValue.large);","pr.setObject( 2, testValue.large);","pr.execute();","pr.setObject( 1, testValue.large);","pr.setObject( 2, testValue.small);","pr.execute();","pr.setObject( 1, null);","pr.setObject( 2, testValue.small);","pr.execute();","pr.setObject( 1, testValue.small);","pr.setObject( 2, null);","pr.execute();","pr.setObject( 1, null);","pr.setObject( 2, null);","pr.execute();"],} ,{"occurences": [[41, 19, "/src/smallsql/database/ExpressionFunctionRound.java"], [41, 19, "/src/smallsql/database/ExpressionFunctionTruncate.java"], ], "code":  ["","boolean isNull() throws Exception{","return param1.isNull() || param2.isNull();","}","final double getDouble() throws Exception{","if(isNull()) return 0;","final int places = param2.getInt();","double value = param1.getDouble();","long factor = 1;","if(places \> 0){","for(int i=0; i\<places; i++){","factor *= 10;","}","value *= factor;","}else{","for(int i=0; i\>places; i--){","factor *= 10;","}","value /= factor;","}"],} ,{"occurences": [[486, 20, "/src/smallsql/database/ExpressionArithmetic.java"], [60, 20, "/src/smallsql/database/ExpressionFunctionReturnP1.java"], ], "code":  ["","return new Integer( getInt() );","case SQLTokenizer.BIGINT:","return new Long( getLong() );","case SQLTokenizer.REAL:","return new Float( getFloat() );","case SQLTokenizer.FLOAT:","case SQLTokenizer.DOUBLE:","return new Double( getDouble() );","case SQLTokenizer.MONEY:","case SQLTokenizer.SMALLMONEY:","return Money.createFromUnscaledValue( getMoney() );","case SQLTokenizer.NUMERIC:","case SQLTokenizer.DECIMAL:","return getNumeric();","case SQLTokenizer.CHAR:","case SQLTokenizer.NCHAR:","case SQLTokenizer.VARCHAR:","case SQLTokenizer.NVARCHAR:","case SQLTokenizer.LONGNVARCHAR:","case SQLTokenizer.LONGVARCHAR:"],} ,{"occurences": [[343, 11, "/src/smallsql/junit/TestOrderBy.java"], [428, 11, "/src/smallsql/junit/TestOrderBy.java"], ], "code":  ["","assertNull(oldValue);","assertTrue( rs.next() );","oldValue = (Integer)rs.getObject(\"i\");","int count = 1;","while(rs.next()){","assertTrue( oldValue.compareTo( (Integer)rs.getObject(\"i\") ) \< 0 );","oldValue = (Integer)rs.getObject(\"i\");","count++;","}","assertEquals( valueCount, count );","}"],} ,{"occurences": [[66, 11, "/src/smallsql/junit/TestOperatoren.java"], [68, 11, "/src/smallsql/junit/TestJoins.java"], ], "code":  ["","a(\"char(100)\"         , new String(\"abc\"),      new String(\"qwert\")),","a(\"nchar(100)\"        , new String(\"abc\"),      new String(\"qwert\")),","a(\"text\"              , new String(\"abc\"),      new String(\"qwert\")),","a(\"ntext\"             , new String(\"abc\"),      new String(\"qwert\")),","a(\"date\"              , new Date(99, 1,1),      new Date(99, 2,2)),","a(\"time\"              , new Time(9, 1,1),       new Time(9, 2,2)),","a(\"timestamp\"         , new Timestamp(99, 1,1,0,0,0,0),      new Timestamp(99, 2,2,0,0,0,0)),","a(\"datetime\"          , new Timestamp(99, 1,1,0,0,0,0),      new Timestamp(99, 2,2,0,0,0,0)),","a(\"smalldatetime\"     , new Timestamp(99, 1,1,0,0,0,0),      new Timestamp(99, 2,2,0,0,0,0)),","a(\"binary(100)\"       , new byte[]{12, 45, 1},  new byte[]{12, 45, 2, 56, 89}),","a(\"varbinary(100)\"    , new byte[]{12, 45, 1},  new byte[]{12, 45, 2, 56, 89}),"],} ,{"occurences": [[131, 22, "/src/smallsql/junit/TestResultSet.java"], [88, 22, "/src/smallsql/junit/TestResultSet.java"], ], "code":  ["","assertFalse(\"isBeforeFirst\", rs.isBeforeFirst() );","assertTrue(\"isAfterLast\", rs.isAfterLast() );","assertEquals(\"getRow\", 0, rs.getRow() );","","assertTrue(\"first\", rs.first() );","assertEquals(\"getRow\", 1, rs.getRow() );","","assertFalse(\"previous\", rs.previous() );","assertEquals(\"getRow\", 0, rs.getRow() );","assertTrue(\"isBeforeFirst\", rs.isBeforeFirst() );","assertFalse(\"isAfterLast\", rs.isAfterLast() );","","assertTrue(\"last\", rs.last() );","assertEquals(\"getRow\", 1, rs.getRow() );","assertTrue(\"isLast\", rs.isLast() );","","rs.afterLast();","assertFalse(\"isBeforeFirst\", rs.isBeforeFirst() );","assertTrue(\"isAfterLast\", rs.isAfterLast() );","assertEquals(\"getRow\", 0, rs.getRow() );","}",""],} ,{"occurences": [[154, 11, "/src/smallsql/database/Where.java"], [117, 11, "/src/smallsql/database/Distinct.java"], ], "code":  ["","final void setRowPosition(long rowPosition) throws Exception {","rowSource.setRowPosition(rowPosition);","}","final void nullRow() {","rowSource.nullRow();","row = 0;","}","final void noRow() {","rowSource.noRow();","row = 0;","}"],} ,{"occurences": [[159, 17, "/src/smallsql/junit/TestThreads.java"], [111, 17, "/src/smallsql/junit/TestThreads.java"], [56, 12, "/src/smallsql/junit/TestThreads.java"], ], "code":  ["","threadList.add(thread);","thread.start();","}","","for(int i = 0; i \< threadList.size(); i++){","Thread thread = (Thread)threadList.get(i);","thread.join(5000);","}","","if(throwable != null){","throw throwable;","}"],} ,{"occurences": [[683, 24, "/src/smallsql/database/StoreImpl.java"], [1478, 24, "/src/smallsql/database/StoreImpl.java"], ], "code":  ["","offset += 2;","break;","case SQLTokenizer.INT:","case SQLTokenizer.REAL:","case SQLTokenizer.SMALLMONEY:","case SQLTokenizer.TIME:","case SQLTokenizer.DATE:","case SQLTokenizer.SMALLDATETIME:","offset += 4;","break;","case SQLTokenizer.BIGINT:","case SQLTokenizer.FLOAT:","case SQLTokenizer.DOUBLE:","case SQLTokenizer.MONEY:","case SQLTokenizer.JAVA_OBJECT:","case SQLTokenizer.LONGVARBINARY:","case SQLTokenizer.BLOB:","case SQLTokenizer.CLOB:","case SQLTokenizer.NCLOB:","case SQLTokenizer.LONGNVARCHAR:","case SQLTokenizer.LONGVARCHAR:","case SQLTokenizer.TIMESTAMP:","offset += 8;","break;"],} ,{"occurences": [[152, 13, "/src/smallsql/database/Where.java"], [115, 13, "/src/smallsql/database/Distinct.java"], ], "code":  ["","return rowSource.getRowPosition();","}","final void setRowPosition(long rowPosition) throws Exception {","rowSource.setRowPosition(rowPosition);","}","final void nullRow() {","rowSource.nullRow();","row = 0;","}","final void noRow() {","rowSource.noRow();","row = 0;","}"],} ,{"occurences": [[419, 13, "/src/smallsql/junit/BenchTest.java"], [473, 13, "/src/smallsql/junit/BenchTest.java"], ], "code":  ["","pr.setBytes (  6, largeByteArray );","pr.setInt   (  7 , i );","pr.setDouble(  8 , 23.45 );","pr.setDouble(  9 , 567.45 );","pr.setFloat (  10 , (float)78.89 );","pr.setTime  (  11, new Time( System.currentTimeMillis() ) );","pr.setShort (  12, (short)23456 );","pr.setFloat (  13, (float)34.56 );","pr.setString(  14, \"sysname (30) NULL\" );","pr.setString(  15 , \"text NULL\" );","pr.setByte  (  16, (byte)28 );","pr.setBytes (  17, byteArray );","pr.setString(  18, \"varchar (255) NULL\" );"],} ,{"occurences": [[130, 23, "/src/smallsql/junit/TestResultSet.java"], [87, 23, "/src/smallsql/junit/TestResultSet.java"], ], "code":  ["","assertFalse(\"next\", rs.next() );","assertFalse(\"isBeforeFirst\", rs.isBeforeFirst() );","assertTrue(\"isAfterLast\", rs.isAfterLast() );","assertEquals(\"getRow\", 0, rs.getRow() );","","assertTrue(\"first\", rs.first() );","assertEquals(\"getRow\", 1, rs.getRow() );","","assertFalse(\"previous\", rs.previous() );","assertEquals(\"getRow\", 0, rs.getRow() );","assertTrue(\"isBeforeFirst\", rs.isBeforeFirst() );","assertFalse(\"isAfterLast\", rs.isAfterLast() );","","assertTrue(\"last\", rs.last() );","assertEquals(\"getRow\", 1, rs.getRow() );","assertTrue(\"isLast\", rs.isLast() );","","rs.afterLast();","assertFalse(\"isBeforeFirst\", rs.isBeforeFirst() );","assertTrue(\"isAfterLast\", rs.isAfterLast() );","assertEquals(\"getRow\", 0, rs.getRow() );","}",""],} ,{"occurences": [[412, 20, "/src/smallsql/junit/BenchTest.java"], [466, 20, "/src/smallsql/junit/BenchTest.java"], ], "code":  ["","long time = -System.currentTimeMillis();","for (int i=0; i\<rowCount; i++){","pr.setBytes (  1, byteArray );","pr.setString(  2 , \"Test\" );","pr.setDate  (  3 , new Date( System.currentTimeMillis() ) );","pr.setFloat (  4, (float)1234.56789 );","pr.setFloat (  5 , (float)9876.54321 );","pr.setBytes (  6, largeByteArray );","pr.setInt   (  7 , i );","pr.setDouble(  8 , 23.45 );","pr.setDouble(  9 , 567.45 );","pr.setFloat (  10 , (float)78.89 );","pr.setTime  (  11, new Time( System.currentTimeMillis() ) );","pr.setShort (  12, (short)23456 );","pr.setFloat (  13, (float)34.56 );","pr.setString(  14, \"sysname (30) NULL\" );","pr.setString(  15 , \"text NULL\" );","pr.setByte  (  16, (byte)28 );","pr.setBytes (  17, byteArray );","pr.setString(  18, \"varchar (255) NULL\" );"],} ,{"occurences": [[65, 12, "/src/smallsql/junit/TestOperatoren.java"], [67, 12, "/src/smallsql/junit/TestJoins.java"], ], "code":  ["","a(\"character(100)\"    , new String(\"abc\"),      new String(\"qwert\")),","a(\"char(100)\"         , new String(\"abc\"),      new String(\"qwert\")),","a(\"nchar(100)\"        , new String(\"abc\"),      new String(\"qwert\")),","a(\"text\"              , new String(\"abc\"),      new String(\"qwert\")),","a(\"ntext\"             , new String(\"abc\"),      new String(\"qwert\")),","a(\"date\"              , new Date(99, 1,1),      new Date(99, 2,2)),","a(\"time\"              , new Time(9, 1,1),       new Time(9, 2,2)),","a(\"timestamp\"         , new Timestamp(99, 1,1,0,0,0,0),      new Timestamp(99, 2,2,0,0,0,0)),","a(\"datetime\"          , new Timestamp(99, 1,1,0,0,0,0),      new Timestamp(99, 2,2,0,0,0,0)),","a(\"smalldatetime\"     , new Timestamp(99, 1,1,0,0,0,0),      new Timestamp(99, 2,2,0,0,0,0)),","a(\"binary(100)\"       , new byte[]{12, 45, 1},  new byte[]{12, 45, 2, 56, 89}),","a(\"varbinary(100)\"    , new byte[]{12, 45, 1},  new byte[]{12, 45, 2, 56, 89}),"],} ,{"occurences": [[158, 18, "/src/smallsql/junit/TestThreads.java"], [110, 18, "/src/smallsql/junit/TestThreads.java"], [55, 13, "/src/smallsql/junit/TestThreads.java"], ], "code":  ["","});","threadList.add(thread);","thread.start();","}","","for(int i = 0; i \< threadList.size(); i++){","Thread thread = (Thread)threadList.get(i);","thread.join(5000);","}","","if(throwable != null){","throw throwable;","}"],} ,{"occurences": [[689, 18, "/src/smallsql/database/StoreImpl.java"], [1484, 18, "/src/smallsql/database/StoreImpl.java"], ], "code":  ["","case SQLTokenizer.DATE:","case SQLTokenizer.SMALLDATETIME:","offset += 4;","break;","case SQLTokenizer.BIGINT:","case SQLTokenizer.FLOAT:","case SQLTokenizer.DOUBLE:","case SQLTokenizer.MONEY:","case SQLTokenizer.JAVA_OBJECT:","case SQLTokenizer.LONGVARBINARY:","case SQLTokenizer.BLOB:","case SQLTokenizer.CLOB:","case SQLTokenizer.NCLOB:","case SQLTokenizer.LONGNVARCHAR:","case SQLTokenizer.LONGVARCHAR:","case SQLTokenizer.TIMESTAMP:","offset += 8;","break;"],} ,{"occurences": [[134, 19, "/src/smallsql/junit/TestResultSet.java"], [91, 19, "/src/smallsql/junit/TestResultSet.java"], [142, 11, "/src/smallsql/junit/TestResultSet.java"], [99, 11, "/src/smallsql/junit/TestResultSet.java"], [162, 14, "/src/smallsql/junit/TestThreads.java"], [114, 14, "/src/smallsql/junit/TestThreads.java"], [137, 16, "/src/smallsql/junit/TestResultSet.java"], [94, 16, "/src/smallsql/junit/TestResultSet.java"], [267, 11, "/src/smallsql/database/SSResultSet.java"], [275, 11, "/src/smallsql/database/SSConnection.java"], [745, 14, "/src/smallsql/junit/TestOrderBy.java"], [714, 14, "/src/smallsql/junit/TestOrderBy.java"], [741, 18, "/src/smallsql/junit/TestOrderBy.java"], [710, 18, "/src/smallsql/junit/TestOrderBy.java"], [266, 12, "/src/smallsql/database/SSResultSet.java"], [274, 12, "/src/smallsql/database/SSConnection.java"], [11, 21, "/src/smallsql/database/ExpressionFunctionATan.java"], [10, 22, "/src/smallsql/database/ExpressionFunctionATan.java"], [9, 23, "/src/smallsql/database/ExpressionFunctionATan.java"], [8, 24, "/src/smallsql/database/ExpressionFunctionATan.java"], [7, 25, "/src/smallsql/database/ExpressionFunctionATan.java"], [6, 26, "/src/smallsql/database/ExpressionFunctionATan.java"], [5, 27, "/src/smallsql/database/ExpressionFunctionATan.java"], [4, 28, "/src/smallsql/database/ExpressionFunctionATan.java"], [3, 29, "/src/smallsql/database/ExpressionFunctionATan.java"], [2, 30, "/src/smallsql/database/ExpressionFunctionATan.java"], [1, 31, "/src/smallsql/database/ExpressionFunctionATan.java"], [0, 32, "/src/smallsql/database/ExpressionFunctionATan.java"], [-1, 33, "/src/smallsql/database/ExpressionFunctionATan.java"], [-2, 34, "/src/smallsql/database/ExpressionFunctionATan.java"], [-3, 35, "/src/smallsql/database/ExpressionFunctionATan.java"], [-4, 36, "/src/smallsql/database/ExpressionFunctionATan.java"], [-5, 37, "/src/smallsql/database/ExpressionFunctionATan.java"], [-6, 38, "/src/smallsql/database/ExpressionFunctionATan.java"], [-7, 39, "/src/smallsql/database/ExpressionFunctionATan.java"], [-8, 40, "/src/smallsql/database/ExpressionFunctionATan.java"], [-9, 41, "/src/smallsql/database/ExpressionFunctionATan.java"], [-10, 42, "/src/smallsql/database/ExpressionFunctionATan.java"], [-11, 43, "/src/smallsql/database/ExpressionFunctionATan.java"], [-12, 44, "/src/smallsql/database/ExpressionFunctionATan.java"], [-13, 45, "/src/smallsql/database/ExpressionFunctionATan.java"], [-14, 46, "/src/smallsql/database/ExpressionFunctionATan.java"], [-15, 47, "/src/smallsql/database/ExpressionFunctionATan.java"], [-16, 48, "/src/smallsql/database/ExpressionFunctionATan.java"], [-17, 49, "/src/smallsql/database/ExpressionFunctionATan.java"], [-18, 50, "/src/smallsql/database/ExpressionFunctionATan.java"], [-19, 51, "/src/smallsql/database/ExpressionFunctionATan.java"], [-20, 52, "/src/smallsql/database/ExpressionFunctionATan.java"], [-21, 53, "/src/smallsql/database/ExpressionFunctionATan.java"], [-22, 54, "/src/smallsql/database/ExpressionFunctionATan.java"], [-23, 55, "/src/smallsql/database/ExpressionFunctionATan.java"], [-24, 56, "/src/smallsql/database/ExpressionFunctionATan.java"], [-25, 57, "/src/smallsql/database/ExpressionFunctionATan.java"], [-26, 58, "/src/smallsql/database/ExpressionFunctionATan.java"], [-27, 59, "/src/smallsql/database/ExpressionFunctionATan.java"], [-28, 60, "/src/smallsql/database/ExpressionFunctionATan.java"], [-29, 61, "/src/smallsql/database/ExpressionFunctionATan.java"], [-30, 62, "/src/smallsql/database/ExpressionFunctionATan.java"], [-31, 63, "/src/smallsql/database/ExpressionFunctionATan.java"], [-32, 64, "/src/smallsql/database/ExpressionFunctionATan.java"], [-33, 65, "/src/smallsql/database/ExpressionFunctionATan.java"], [-34, 66, "/src/smallsql/database/ExpressionFunctionATan.java"], [-35, 67, "/src/smallsql/database/ExpressionFunctionATan.java"], [-61, 67, "/src/smallsql/database/ExpressionFunctionATan.java"], [12, 20, "/src/smallsql/database/ExpressionFunctionATan.java"], [46, 20, "/src/smallsql/database/FileIndex.java"], [13, 19, "/src/smallsql/database/ExpressionFunctionATan.java"], [47, 19, "/src/smallsql/database/FileIndex.java"], [14, 18, "/src/smallsql/database/ExpressionFunctionATan.java"], [48, 18, "/src/smallsql/database/FileIndex.java"], [15, 17, "/src/smallsql/database/ExpressionFunctionATan.java"], [49, 17, "/src/smallsql/database/FileIndex.java"], [16, 16, "/src/smallsql/database/ExpressionFunctionATan.java"], [50, 16, "/src/smallsql/database/FileIndex.java"], [17, 15, "/src/smallsql/database/ExpressionFunctionATan.java"], [51, 15, "/src/smallsql/database/FileIndex.java"], [18, 14, "/src/smallsql/database/ExpressionFunctionATan.java"], [52, 14, "/src/smallsql/database/FileIndex.java"], [19, 13, "/src/smallsql/database/ExpressionFunctionATan.java"], [53, 13, "/src/smallsql/database/FileIndex.java"], [20, 12, "/src/smallsql/database/ExpressionFunctionATan.java"], [54, 12, "/src/smallsql/database/FileIndex.java"], [21, 11, "/src/smallsql/database/ExpressionFunctionATan.java"], [55, 11, "/src/smallsql/database/FileIndex.java"], [330, 11, "/src/smallsql/database/LongTreeList.java"], [375, 11, "/src/smallsql/database/LongTreeList.java"], ], "code":  ["","","assertTrue(\"last\", rs.last() );","assertEquals(\"getRow\", 1, rs.getRow() );","assertTrue(\"isLast\", rs.isLast() );","","rs.afterLast();","assertFalse(\"isBeforeFirst\", rs.isBeforeFirst() );","assertTrue(\"isAfterLast\", rs.isAfterLast() );","assertEquals(\"getRow\", 0, rs.getRow() );","}",""],} ,{"occurences": [[485, 21, "/src/smallsql/database/ExpressionArithmetic.java"], [59, 21, "/src/smallsql/database/ExpressionFunctionReturnP1.java"], [685, 22, "/src/smallsql/database/StoreImpl.java"], [1480, 22, "/src/smallsql/database/StoreImpl.java"], [316, 12, "/src/smallsql/database/ExpressionArithmetic.java"], [269, 12, "/src/smallsql/database/ExpressionArithmetic.java"], ], "code":  ["","case SQLTokenizer.INT:","return getIntImpl();","case SQLTokenizer.BIGINT:","return getLongImpl();","case SQLTokenizer.REAL:","return getFloatImpl();","case SQLTokenizer.FLOAT:","case SQLTokenizer.DOUBLE:","case SQLTokenizer.MONEY:","case SQLTokenizer.SMALLMONEY:","case SQLTokenizer.NUMERIC:","case SQLTokenizer.DECIMAL:"],} ,{"occurences": [[69, 11, "/src/smallsql/junit/TestDataTypes.java"], [375, 14, "/src/smallsql/junit/TestFunctions.java"], [96, 14, "/src/smallsql/junit/TestOperatoren.java"], [315, 14, "/src/smallsql/junit/BenchTest.java"], [201, 14, "/src/smallsql/junit/BenchTest.java"], ], "code":  ["","try{","Connection con = AllTests.getConnection();","Statement st = con.createStatement();","st.execute(\"drop table \" + table);","st.close();","}catch(Throwable e){","","}","}","public void setUp(){","tearDown();"],} ,{"occurences": [[68, 12, "/src/smallsql/junit/TestDataTypes.java"], [374, 15, "/src/smallsql/junit/TestFunctions.java"], [95, 15, "/src/smallsql/junit/TestOperatoren.java"], ], "code":  ["","public void tearDown(){","try{","Connection con = AllTests.getConnection();","Statement st = con.createStatement();","st.execute(\"drop table \" + table);","st.close();","}catch(Throwable e){","","}","}","public void setUp(){","tearDown();"],} ,{"occurences": [[415, 17, "/src/smallsql/junit/BenchTest.java"], [469, 17, "/src/smallsql/junit/BenchTest.java"], ], "code":  ["","pr.setString(  2 , \"Test\" );","pr.setDate  (  3 , new Date( System.currentTimeMillis() ) );","pr.setFloat (  4, (float)1234.56789 );","pr.setFloat (  5 , (float)9876.54321 );","pr.setBytes (  6, largeByteArray );","pr.setInt   (  7 , i );","pr.setDouble(  8 , 23.45 );","pr.setDouble(  9 , 567.45 );","pr.setFloat (  10 , (float)78.89 );","pr.setTime  (  11, new Time( System.currentTimeMillis() ) );","pr.setShort (  12, (short)23456 );","pr.setFloat (  13, (float)34.56 );","pr.setString(  14, \"sysname (30) NULL\" );","pr.setString(  15 , \"text NULL\" );","pr.setByte  (  16, (byte)28 );","pr.setBytes (  17, byteArray );","pr.setString(  18, \"varchar (255) NULL\" );"],} ,{"occurences": [[48, 12, "/src/smallsql/database/ExpressionFunctionRound.java"], [48, 12, "/src/smallsql/database/ExpressionFunctionTruncate.java"], ], "code":  ["","long factor = 1;","if(places \> 0){","for(int i=0; i\<places; i++){","factor *= 10;","}","value *= factor;","}else{","for(int i=0; i\>places; i--){","factor *= 10;","}","value /= factor;","}"],} ,{"occurences": [[500, 11, "/src/smallsql/junit/BenchTest.java"], [444, 12, "/src/smallsql/junit/BenchTest.java"], [554, 12, "/src/smallsql/junit/BenchTest.java"], [632, 17, "/src/smallsql/junit/BenchTest.java"], [672, 17, "/src/smallsql/junit/BenchTest.java"], ], "code":  ["","pr.close();","}catch(Exception e){","System.out.println(\"  Failed:\"+e);","}finally{","System.out.println();","System.out.println(\"===================================================================\");","}","}","","",""],} ,{"occurences": [[61, 29, "/src/smallsql/database/ExpressionFunctionReturnString.java"], [57, 29, "/src/smallsql/database/ExpressionFunctionReturnP1StringAndBinary.java"], ], "code":  ["","final boolean getBoolean() throws Exception {","if(isNull()) return false;","return Utils.string2boolean(getString().trim());","}","final int getInt() throws Exception {","if(isNull()) return 0;","return Integer.parseInt(getString().trim());","}","final long getLong() throws Exception {","if(isNull()) return 0;","return Long.parseLong(getString().trim());","}","final float getFloat() throws Exception {","if(isNull()) return 0;","return Float.parseFloat(getString().trim());","}","final double getDouble() throws Exception {","if(isNull()) return 0;","return Double.parseDouble(getString().trim());","}","final long getMoney() throws Exception {","if(isNull()) return 0;","return Money.parseMoney(getString().trim());","}","final MutableNumeric getNumeric() throws Exception {","if(isNull()) return null;","return new MutableNumeric(getString().trim());","}","final Object getObject() throws Exception {"],} ,{"occurences": [[634, 15, "/src/smallsql/junit/BenchTest.java"], [674, 15, "/src/smallsql/junit/BenchTest.java"], [359, 12, "/src/smallsql/junit/BenchTest.java"], [600, 12, "/src/smallsql/junit/BenchTest.java"], [150, 12, "/src/smallsql/junit/BenchTest.java"], [443, 13, "/src/smallsql/junit/BenchTest.java"], [553, 13, "/src/smallsql/junit/BenchTest.java"], ], "code":  ["","System.out.println( \"  Test time: \" + time + \" ms\");","st.close();","}catch(Exception e){","System.out.println(\"  Failed:\"+e);","}finally{","System.out.println();","System.out.println(\"===================================================================\");","}","}","","",""],} ,{"occurences": [[633, 16, "/src/smallsql/junit/BenchTest.java"], [673, 16, "/src/smallsql/junit/BenchTest.java"], [358, 13, "/src/smallsql/junit/BenchTest.java"], [599, 13, "/src/smallsql/junit/BenchTest.java"], [149, 13, "/src/smallsql/junit/BenchTest.java"], [442, 14, "/src/smallsql/junit/BenchTest.java"], [552, 14, "/src/smallsql/junit/BenchTest.java"], ], "code":  ["","time += System.currentTimeMillis();","System.out.println( \"  Test time: \" + time + \" ms\");","st.close();","}catch(Exception e){","System.out.println(\"  Failed:\"+e);","}finally{","System.out.println();","System.out.println(\"===================================================================\");","}","}","","",""],} ,{"occurences": [[44, 16, "/src/smallsql/database/ExpressionFunctionRound.java"], [44, 16, "/src/smallsql/database/ExpressionFunctionTruncate.java"], ], "code":  ["","final double getDouble() throws Exception{","if(isNull()) return 0;","final int places = param2.getInt();","double value = param1.getDouble();","long factor = 1;","if(places \> 0){","for(int i=0; i\<places; i++){","factor *= 10;","}","value *= factor;","}else{","for(int i=0; i\>places; i--){","factor *= 10;","}","value /= factor;","}"],} ,{"occurences": [[71, 19, "/src/smallsql/database/ExpressionFunctionReturnString.java"], [67, 19, "/src/smallsql/database/ExpressionFunctionReturnP1StringAndBinary.java"], ], "code":  ["","return Long.parseLong(getString().trim());","}","final float getFloat() throws Exception {","if(isNull()) return 0;","return Float.parseFloat(getString().trim());","}","final double getDouble() throws Exception {","if(isNull()) return 0;","return Double.parseDouble(getString().trim());","}","final long getMoney() throws Exception {","if(isNull()) return 0;","return Money.parseMoney(getString().trim());","}","final MutableNumeric getNumeric() throws Exception {","if(isNull()) return null;","return new MutableNumeric(getString().trim());","}","final Object getObject() throws Exception {"],} ,{"occurences": [[1372, 11, "/src/smallsql/database/StoreImpl.java"], [1305, 11, "/src/smallsql/database/StoreImpl.java"], ], "code":  ["","case SQLTokenizer.VARCHAR:","case SQLTokenizer.NVARCHAR:","return readString();","case SQLTokenizer.CLOB:","case SQLTokenizer.NCLOB:","case SQLTokenizer.LONGNVARCHAR:","case SQLTokenizer.LONGVARCHAR:","return readLongString();","case SQLTokenizer.JAVA_OBJECT:","ByteArrayInputStream bais = new ByteArrayInputStream(readLongBinary());","ObjectInputStream ois = new ObjectInputStream(bais);"],} ,];